{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport { CheckBoxBasic } from \"@components/common/basic/CheckBoxBasic\";\nimport { BlueButton } from \"@components/common/button\";\nimport ButtonWrap from \"@components/common/button/ButtonWrap\";\nimport LoginLayout, { LoginBox } from \"@components/layout/login\";\nimport { CheckRow, FormButtonBasic, FormConfrimButton, FormWrap, InputBox } from \"@components/mypage/form\";\nimport MyPagePopup from \"@components/mypage/popup\";\nimport rootStore from \"@stores\";\nimport { axios } from \"@utils/network.util\";\nimport { useRouter } from \"next/router\";\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form/dist/index.ie11\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst JoinBox = /*#__PURE__*/_styled(LoginBox, {\n  target: \"e1utam5d3\",\n  label: \"JoinBox\"\n})(\"padding-top:60px;>h2{margin-bottom:40px;}\", CheckBoxBasic, \" input[type=\\\"checkbox\\\"]+label strong{font-weight:500px;}\", CheckBoxBasic, \"+\", CheckBoxBasic, \"{margin-top:10px;}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst PopCont = _styled(\"div\", {\n  target: \"e1utam5d2\",\n  label: \"PopCont\"\n})(\"padding:20px;box-sizing:border-box;\", ButtonWrap, \"{margin-top:20px;>button{width:120px;height:34px;line-height:32px;border-radius:5px;}}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst AgreeBoxWrap = _styled(\"div\", {\n  target: \"e1utam5d1\",\n  label: \"AgreeBoxWrap\"\n})(true ? {\n  name: \"apkr4s\",\n  styles: \"width:100%;height:300px;border:1px solid #dbdbdb;padding:10px;padding-right:3px;box-sizing:border-box;>div.agree_box{font-size:14px;line-height:1.5;padding-right:15px;}\"\n} : {\n  name: \"apkr4s\",\n  styles: \"width:100%;height:300px;border:1px solid #dbdbdb;padding:10px;padding-right:3px;box-sizing:border-box;>div.agree_box{font-size:14px;line-height:1.5;padding-right:15px;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst ErrorMessage = _styled(\"p\", {\n  target: \"e1utam5d0\",\n  label: \"ErrorMessage\"\n})(true ? {\n  name: \"1cca742\",\n  styles: \"color:red;font-size:12px;padding-left:10px;margin-top:5px\"\n} : {\n  name: \"1cca742\",\n  styles: \"color:red;font-size:12px;padding-left:10px;margin-top:5px\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst JoinPage = () => {\n  //#region popup\n  const {\n    0: isUseAgreePop,\n    1: setUseAgreePop\n  } = useState(false);\n  const {\n    0: isPrivacyPop,\n    1: setPrivacyPop\n  } = useState(false);\n  const {\n    0: isAdPop,\n    1: setAdPop\n  } = useState(false);\n  const onToggleUseAgreePop = useCallback(() => {\n    setUseAgreePop(!isUseAgreePop);\n  }, [isUseAgreePop]);\n  const onTogglePrivacyPop = useCallback(() => {\n    setPrivacyPop(!isPrivacyPop);\n  }, [isPrivacyPop]);\n  const onToggleAdPop = useCallback(() => {\n    setAdPop(!isAdPop);\n  }, [isAdPop]); //#endregion\n\n  const router = useRouter();\n  const {\n    register,\n    errors,\n    getValues,\n    setValue,\n    handleSubmit\n  } = useForm();\n  const onJoinSubmit = useCallback(handleSubmit(async (_ref) => {\n    let {\n      checkId,\n      useYn,\n      passwordConfirm,\n      notifyYn\n    } = _ref,\n        formData = _objectWithoutProperties(_ref, [\"checkId\", \"useYn\", \"passwordConfirm\", \"notifyYn\"]);\n\n    if (checkId !== \"Y\") {\n      alert(\"아이디 중복검사를 하셔야 합니다.\");\n      return;\n    }\n\n    if (useYn !== \"Y\") {\n      alert(\"이용약관에 동의하셔야 합니다.\");\n      return;\n    }\n\n    if (formData.password !== passwordConfirm) {\n      alert(\"비밀번호와 비밀번호 확인에 입력하신 정보가 맞지 않습니다.\");\n      return;\n    }\n\n    const agreeYn = notifyYn !== null && notifyYn !== void 0 ? notifyYn : \"N\";\n\n    try {\n      const {\n        data: token\n      } = await axios.post(\"/user/signUp\", _objectSpread(_objectSpread({}, formData), {}, {\n        sno: Number(formData.sno),\n        agreeYn\n      }));\n      const {\n        data\n      } = await axios.post(\"/api/signUp\", {\n        token\n      }, {\n        baseURL: \"\"\n      });\n      axios.defaults.headers.authorization = `Bearer ${data.token}`;\n      rootStore.commonStore.settingLoggedIn(data);\n      alert(\"회원가입 되셨습니다.\");\n      router.replace(\"/user/signUp/complete\");\n    } catch (error) {\n      alert(\"오류가 발생했습니다.\");\n    }\n  }), []);\n  const onSendCert = useCallback(async () => {\n    const mobile = getValues().mobile.replace(/[^\\d]/g, \"\");\n\n    if (mobile) {\n      try {\n        const {\n          data: sno\n        } = await axios.post(\"/sms/cert\", {\n          mobile\n        });\n        setValue(\"sno\", sno);\n      } catch (error) {\n        var _error$response;\n\n        if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400) {\n          alert(\"인증횟수가 초과하였습니다.\\n잠시 후 다시 시도해주세요\");\n        }\n      }\n    } else {\n      alert(\"핸드폰 번호를 입력해주세요.\");\n    }\n  }, []);\n  const onCheckLoginIdClick = useCallback(async () => {\n    const loginId = getValues().loginId;\n\n    if (loginId) {\n      const {\n        data: isUser\n      } = await axios.get(`/user/check/${loginId}`);\n\n      if (isUser) {\n        setValue(\"checkId\", \"Y\");\n        alert(\"사용가능한 아이디 입니다.\");\n      } else {\n        alert(\"이미 사용중인 아이디 입니다.\");\n      }\n    } else {\n      alert(\"아이디를 입력해주세요.\");\n    }\n  }, []);\n  return /*#__PURE__*/_jsxs(LoginLayout, {\n    children: [/*#__PURE__*/_jsxs(JoinBox, {\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n      }), /*#__PURE__*/_jsxs(\"form\", {\n        autoComplete: \"off\",\n        onSubmit: onJoinSubmit,\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          type: \"hidden\",\n          ref: register,\n          name: \"sno\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"hidden\",\n          ref: register,\n          name: \"checkId\"\n        }), /*#__PURE__*/_jsx(\"fieldset\", {\n          children: /*#__PURE__*/_jsxs(FormWrap, {\n            children: [/*#__PURE__*/_jsxs(InputBox, {\n              hasButton: true,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"password\",\n                autoComplete: \"new-password\",\n                style: {\n                  display: \"none\"\n                }\n              }), /*#__PURE__*/_jsx(\"input\", {\n                name: \"loginId\",\n                type: \"text\",\n                placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                autoComplete: \"off\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"사용하실 아이디를 입력해주세요.\"\n                  },\n                  pattern: {\n                    value: /(?!(\\.|_))(?!.*(\\.|_)$)(?!.*(\\.|_){2,})^[\\w.]{4,18}$/,\n                    message: \"아이디는 영문과 숫자의 조합으로만 가능합니다.\"\n                  }\n                })\n              }), /*#__PURE__*/_jsx(FormButtonBasic, {\n                onClick: onCheckLoginIdClick,\n                type: \"button\",\n                children: \"\\uC911\\uBCF5\\uD655\\uC778\"\n              }), (errors === null || errors === void 0 ? void 0 : errors.loginId) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.loginId.message\n              })]\n            }), /*#__PURE__*/_jsxs(InputBox, {\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"password\",\n                name: \"password\",\n                placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"비밀번호를 입력해주세요.\"\n                  },\n                  pattern: {\n                    value: /^(?=.*[a-zA-Z])(?=.*\\d)[A-Za-z\\d\\$\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\-\\=\\[\\]\\{\\}\\/\\.\\,\\>\\<\\?\\\\\\|]{6,}$/,\n                    message: \"비밀번호는 영어1글자 숫자1글자를 포함하여 6자리 이상으로 만들어주세요.\"\n                  }\n                })\n              }), (errors === null || errors === void 0 ? void 0 : errors.password) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.password.message\n              })]\n            }), /*#__PURE__*/_jsxs(InputBox, {\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                name: \"passwordConfirm\",\n                type: \"password\",\n                placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n                autoComplete: \"off\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"비밀번호 확인을 입력해주세요.\"\n                  }\n                })\n              }), (errors === null || errors === void 0 ? void 0 : errors.passwordConfirm) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.passwordConfirm.message\n              })]\n            }), /*#__PURE__*/_jsxs(InputBox, {\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                placeholder: \"\\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                autoComplete: \"off\",\n                name: \"kornm\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"이름을 입력해주세요.\"\n                  },\n                  pattern: {\n                    value: /[a-zA-Z가-힣]$/,\n                    message: \"이름은 영문 또는 한글로 사용 가능합니다. \"\n                  }\n                })\n              }), (errors === null || errors === void 0 ? void 0 : errors.kornm) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.kornm.message\n              })]\n            }), /*#__PURE__*/_jsxs(InputBox, {\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"email\",\n                placeholder: \"\\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                autoComplete: \"off\",\n                name: \"email\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"이메일을 입력해주세요.\"\n                  },\n                  pattern: {\n                    value: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                    message: \"이메일이 정확하지 않습니다.\"\n                  }\n                })\n              }), (errors === null || errors === void 0 ? void 0 : errors.email) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.email.message\n              })]\n            }), /*#__PURE__*/_jsxs(InputBox, {\n              hasButton: true,\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                placeholder: \"\\uD578\\uB4DC\\uD3F0\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n                autoComplete: \"off\",\n                name: \"mobile\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"핸드폰번호를 입력해주세요.\"\n                  },\n                  pattern: {\n                    value: /([\\d]{3})(-|)([\\d]{3,4})(-|)([\\d]{4})/,\n                    message: \"핸드폰번호가 정확하지 않습니다.\"\n                  }\n                })\n              }), /*#__PURE__*/_jsx(FormButtonBasic, {\n                onClick: onSendCert,\n                type: \"button\",\n                children: \"\\uC778\\uC99D\\uBC88\\uD638 \\uBC1C\\uC1A1\"\n              }), (errors === null || errors === void 0 ? void 0 : errors.mobile) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.mobile.message\n              })]\n            }), /*#__PURE__*/_jsxs(InputBox, {\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                placeholder: \"\\uC778\\uC99D\\uBC88\\uD638\",\n                autoComplete: \"off\",\n                name: \"certMsg\",\n                ref: register({\n                  required: {\n                    value: true,\n                    message: \"인증번호를 입력해주세요.\"\n                  }\n                })\n              }), (errors === null || errors === void 0 ? void 0 : errors.certMsg) && /*#__PURE__*/_jsx(ErrorMessage, {\n                children: errors === null || errors === void 0 ? void 0 : errors.certMsg.message\n              })]\n            }), /*#__PURE__*/_jsxs(CheckRow, {\n              children: [/*#__PURE__*/_jsxs(CheckBoxBasic, {\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  type: \"checkbox\",\n                  id: \"agree01\",\n                  name: \"useYn\",\n                  ref: register,\n                  value: \"Y\"\n                }), /*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"agree01\",\n                  children: [/*#__PURE__*/_jsx(\"a\", {\n                    onClick: onToggleUseAgreePop,\n                    children: /*#__PURE__*/_jsx(\"strong\", {\n                      children: \"\\uC774\\uC6A9\\uC57D\\uAD00\"\n                    })\n                  }), \"\\uACFC\", \" \", /*#__PURE__*/_jsx(\"a\", {\n                    onClick: onTogglePrivacyPop,\n                    children: /*#__PURE__*/_jsx(\"strong\", {\n                      children: \"\\uAC1C\\uC778\\uC815\\uBCF4\\uCC98\\uB9AC\\uBC29\\uCE68\"\n                    })\n                  }), \"\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.(\\uD544\\uC218)\"]\n                })]\n              }), /*#__PURE__*/_jsxs(CheckBoxBasic, {\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  type: \"checkbox\",\n                  name: \"notifyYn\",\n                  id: \"agree02\",\n                  ref: register,\n                  value: \"Y\"\n                }), /*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"agree02\",\n                  children: [/*#__PURE__*/_jsx(\"a\", {\n                    onClick: onToggleAdPop,\n                    children: /*#__PURE__*/_jsx(\"strong\", {\n                      children: \"\\uAD11\\uACE0\\uC131 \\uC815\\uBCF4 \\uC218\\uC2E0\"\n                    })\n                  }), \"\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.(\\uC120\\uD0DD)\"]\n                })]\n              })]\n            }), /*#__PURE__*/_jsx(ButtonWrap, {\n              children: /*#__PURE__*/_jsx(FormConfrimButton, {\n                type: \"submit\",\n                children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n              })\n            })]\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(MyPagePopup, {\n      title: \"\\uC774\\uC6A9\\uC57D\\uAD00\",\n      show: isUseAgreePop,\n      onClose: onToggleUseAgreePop,\n      children: /*#__PURE__*/_jsxs(PopCont, {\n        children: [/*#__PURE__*/_jsx(AgreeBoxWrap, {\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"agree_box\",\n            children: \"\\uC774\\uC6A9\\uC57D\\uAD00\"\n          })\n        }), /*#__PURE__*/_jsx(ButtonWrap, {\n          children: /*#__PURE__*/_jsx(BlueButton, {\n            onClick: onToggleUseAgreePop,\n            children: \"\\uD655\\uC778\"\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(MyPagePopup, {\n      title: \"\\uAC1C\\uC778\\uC815\\uBCF4\\uCC98\\uB9AC\\uBC29\\uCE68\",\n      show: isPrivacyPop,\n      onClose: onTogglePrivacyPop,\n      children: /*#__PURE__*/_jsxs(PopCont, {\n        children: [/*#__PURE__*/_jsx(AgreeBoxWrap, {\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"agree_box\",\n            children: \"\\uAC1C\\uC778\\uC815\\uBCF4\\uCC98\\uB9AC\\uBC29\\uCE68\"\n          })\n        }), /*#__PURE__*/_jsx(ButtonWrap, {\n          children: /*#__PURE__*/_jsx(BlueButton, {\n            onClick: onTogglePrivacyPop,\n            children: \"\\uD655\\uC778\"\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(MyPagePopup, {\n      title: \"\\uAD11\\uACE0\\uC131 \\uC815\\uBCF4 \\uC218\\uC2E0\",\n      show: isAdPop,\n      onClose: onToggleAdPop,\n      children: /*#__PURE__*/_jsxs(PopCont, {\n        children: [/*#__PURE__*/_jsx(AgreeBoxWrap, {\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"agree_box\",\n            children: \"\\uAD11\\uACE0\\uC131 \\uC815\\uBCF4 \\uC218\\uC2E0\"\n          })\n        }), /*#__PURE__*/_jsx(ButtonWrap, {\n          children: /*#__PURE__*/_jsx(BlueButton, {\n            onClick: onToggleAdPop,\n            children: \"\\uD655\\uC778\"\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default JoinPage;","map":null,"metadata":{},"sourceType":"module"}