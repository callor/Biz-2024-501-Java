{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport { BlueButton } from \"@components/common/button\";\nimport MyPageLayout from \"@components/layout/mypage\";\nimport InviteUserTable from \"@components/mypage/group/InviteUserTable\";\nimport ColorUtil from \"@utils/color.util\";\nimport { axios, serverAxios } from \"@utils/network.util\";\nimport { useRouter } from \"next/router\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\"; //#region styled\n\nconst GroupTable = _styled(\"div\", {\n  target: \"egy7v1f12\",\n  label: \"GroupTable\"\n})(true ? {\n  name: \"1n3c52c\",\n  styles: \"height:100%;border:1px solid #dbdbdb;border-top:1px solid #454545;box-sizing:border-box;width:220px;display:flex;flex-direction:column\"\n} : {\n  name: \"1n3c52c\",\n  styles: \"height:100%;border:1px solid #dbdbdb;border-top:1px solid #454545;box-sizing:border-box;width:220px;display:flex;flex-direction:column\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst GroupWrap = _styled(\"div\", {\n  target: \"egy7v1f11\",\n  label: \"GroupWrap\"\n})(true ? {\n  name: \"15currb\",\n  styles: \"display:flex;height:100%\"\n} : {\n  name: \"15currb\",\n  styles: \"display:flex;height:100%\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2VtcC9mcm9udC9uZXh0L3NyYy9wYWdlcy91c2VyL2dyb3VwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQjRCIiwiZmlsZSI6Ii9ob21lL2VtcC9mcm9udC9uZXh0L3NyYy9wYWdlcy91c2VyL2dyb3VwLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVCdXR0b24gfSBmcm9tIFwiQGNvbXBvbmVudHMvY29tbW9uL2J1dHRvblwiO1xuaW1wb3J0IE15UGFnZUxheW91dCBmcm9tIFwiQGNvbXBvbmVudHMvbGF5b3V0L215cGFnZVwiO1xuaW1wb3J0IEludml0ZVVzZXJUYWJsZSBmcm9tIFwiQGNvbXBvbmVudHMvbXlwYWdlL2dyb3VwL0ludml0ZVVzZXJUYWJsZVwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgQ29sb3JVdGlsIGZyb20gXCJAdXRpbHMvY29sb3IudXRpbFwiO1xuaW1wb3J0IHsgYXhpb3MsIHNlcnZlckF4aW9zIH0gZnJvbSBcIkB1dGlscy9uZXR3b3JrLnV0aWxcIjtcbmltcG9ydCB7IEdldFNlcnZlclNpZGVQcm9wcyB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vI3JlZ2lvbiBzdHlsZWRcbmNvbnN0IEdyb3VwVGFibGUgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkYmRiZGI7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNDU0NTQ1O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogMjIwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBHcm91cFdyYXAgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7XG5gO1xuXG5jb25zdCBUYWJsZUNvbnQgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuYDtcblxuY29uc3QgR3JvdXBMaXN0ID0gc3R5bGVkLnVsYGA7XG5jb25zdCBHcm91cEl0ZW0gPSBzdHlsZWQubGk8eyBpc09uPzogYm9vbGVhbiB9PmBcbiAgaGVpZ2h0OiAzNnB4O1xuICBsaW5lLWhlaWdodDogMzRweDtcbiAgcGFkZGluZy1sZWZ0OiA3cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkYmRiZGI7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICR7KHByb3BzKSA9PiAocHJvcHMuaXNPbiA/IFwiI2ZmZlwiIDogXCIjZjVmNmY4XCIpfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsocHJvcHMpID0+IChwcm9wcy5pc09uID8gXCIjNjQ4NWFlXCIgOiBcIiM4ODhlOWNcIil9O1xuYDtcblxuY29uc3QgVGFibGVUb3AgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDQycHg7XG4gIGJhY2tncm91bmQ6ICNmYWZhZmE7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICA+IHAge1xuICAgIGxpbmUtaGVpZ2h0OiA0MnB4O1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGNvbG9yOiAjMjUyNTI1O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuYDtcblxuY29uc3QgVGFibGVCdG0gPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDExMHB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiBhdXRvO1xuICB6LWluZGV4OiAyO1xuICA+IGlucHV0IHtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gIH1cbiAgPiAke0JsdWVCdXR0b259IHtcbiAgICBtYXJnaW4tdG9wOiBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNDBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIH1cbmA7XG5cbmNvbnN0IE1hbmFnZVRhYmxlID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDM1MHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGJkYmRiO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzQ1NDU0NTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgPiB0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGFibGUtbGF5b3V0OiBmaXhlZDtcbiAgICA+IHRoZWFkIHtcbiAgICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZWVlZTtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgICAgIHRoIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQycHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgY29sb3I6ICMyNTI1MjU7XG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkYmRiZGI7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xuICAgICAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICAgIGJvcmRlci1yaWdodDogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgTWFuYWdlVXNlclRhYmxlID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA0NHB4KTtcbiAgb3ZlcmZsb3cteTogYXV0bztcblxuICB0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGFibGUtbGF5b3V0OiBmaXhlZDtcbiAgICB0Ym9keSB7XG4gICAgICB0ciB7XG4gICAgICAgIGhlaWdodDogMzZweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7XG4gICAgICB9XG4gICAgICB0ZCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgY29sb3I6ICM0NTQ1NDU7XG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkYmRiZGI7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgJjpudGgtb2YtdHlwZSgxKSB7XG4gICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgTmFtZSA9IHN0eWxlZC50ZGBcbiAgcGFkZGluZzogMCA5cHg7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5gO1xuXG5jb25zdCBCYXNpY0NoZWNrID0gc3R5bGVkLnNwYW5gXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMzVweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIvaW1hZ2VzL2J0bi9idG5fZ3JvdXBfY2hlY2sucG5nXCIpIGNlbnRlciBuby1yZXBlYXQ7XG5gO1xuXG5jb25zdCBJbnZpdGVUZXh0ID0gc3R5bGVkLnNwYW5gXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjBweDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogI2VmODQyNTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuY29uc3QgS2lja0J1dHRvbiA9IHN0eWxlZC5zcGFuYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDM1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYmFja2dyb3VuZDogdXJsKFwiL2ltYWdlcy9idG4vYnRuX3dpdGhkcmF3LnBuZ1wiKSBjZW50ZXIgbm8tcmVwZWF0O1xuYDtcbi8vI2VuZHJlZ2lvblxuXG50eXBlIE15R3JvdXBQYWdlUHJvcHMgPSB7XG4gIGNhbGVuZGFyczogQ2FsZW5kYXJVc3JbXTtcbn07XG5cbnR5cGUgVXNlciA9IHtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIGxvZ2luSWQ6IHN0cmluZztcbiAga29ybm06IHN0cmluZztcbiAgbW9iaWxlOiBzdHJpbmc7XG4gIGx2OiBudW1iZXI7XG4gIGludml0ZVluOiBZTjtcbn07XG5cbmNvbnN0IE15R3JvdXBQYWdlID0gKHsgY2FsZW5kYXJzIH06IE15R3JvdXBQYWdlUHJvcHMpID0+IHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IFtzZWxlY3RDYWxlbmRhciwgc2V0U2VsZWN0Q2FsZW5kYXJdID0gdXNlU3RhdGU8c3RyaW5nPigpO1xuICBjb25zdCBbaXNBZG1pbiwgc2V0QWRtaW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbdXNlcnMsIHNldFVzZXJzXSA9IHVzZVN0YXRlPFVzZXJbXT4oW10pO1xuXG4gIGNvbnN0IGdldENhbGVuZGFyVXNlcnMgPSB1c2VDYWxsYmFjayhhc3luYyAoY2FsZW5kYXJJZDogc3RyaW5nKSA9PiB7XG4gICAgc2V0U2VsZWN0Q2FsZW5kYXIoY2FsZW5kYXJJZCk7XG4gICAgaWYgKGNhbGVuZGFySWQpIHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdXNlckNhbGVuZGFyIH0gPSBhd2FpdCBheGlvcy5nZXQoXG4gICAgICAgIGAvZGlhcnkvY2FsZW5kYXIvJHtjYWxlbmRhcklkfWBcbiAgICAgICk7XG4gICAgICAvLyDqtIDrpqzsnpAg6raM7ZWcIOyytO2BrFxuICAgICAgaWYgKFs1LCA5XS5pbmNsdWRlcyh1c2VyQ2FsZW5kYXIubHYpKSB7XG4gICAgICAgIHNldEFkbWluKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0QWRtaW4oZmFsc2UpO1xuICAgICAgfVxuICAgICAgLy8g7IKs7Jqp7J6QIOu2iOufrOyYpOq4sFxuICAgICAgY29uc3QgeyBkYXRhOiB1c2VycyB9ID0gYXdhaXQgYXhpb3MuZ2V0PFVzZXJbXT4oXG4gICAgICAgIGAvZGlhcnkvY2FsZW5kYXIvJHtjYWxlbmRhcklkfS91c2Vyc2BcbiAgICAgICk7XG4gICAgICBzZXRVc2Vycyh1c2Vycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFVzZXJzKFtdKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBvblNlbGVjdENhbGVuZGFyID0gdXNlQ2FsbGJhY2soKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTExJRWxlbWVudD4pID0+IHtcbiAgICBnZXRDYWxlbmRhclVzZXJzKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGVuZGFySWQpO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBnZXRDYWxlbmRhclVzZXJzKGNhbGVuZGFyc1swXT8uY2FsZW5kYXJJZCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBvbkFkZEdyb3VwQ2xpY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PihcIiNncm91cE5hbWVcIilcbiAgICAgIC52YWx1ZS50cmltKCk7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBhbGVydChcIuyCrOyaqe2VmOyLpCDqt7jro7nrqoXsnYQg7KCB7Ja07KO87IS47JqUXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJnQ29sb3IgPSBDb2xvclV0aWwucmFuZG9tQ29sb3IoKTtcbiAgICBjb25zdCBjb2xvciA9IENvbG9yVXRpbC5pc0RhcmsoYmdDb2xvcikgPyBcIiNmZmZmZmZcIiA6IFwiIzMzMzMzM1wiO1xuXG4gICAgYXdhaXQgYXhpb3MucG9zdChcIi9kaWFyeS9jYWxlbmRhclwiLCB7IG5hbWUsIGJnQ29sb3IsIGNvbG9yIH0pO1xuXG4gICAgcm91dGVyLnJlbG9hZCgpO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgb25EZWxldGVVc2VyQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgIGlmIChpc0FkbWluKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlcklkIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICAgICAgYXdhaXQgYXhpb3MuZGVsZXRlKGAvZGlhcnkvY2FsZW5kYXIvJHtzZWxlY3RDYWxlbmRhcn0vJHt1c2VySWR9YCk7XG4gICAgICAgIGFsZXJ0KFwi7IKt7KCc65CY7JeI7Iq164uI64ukLlwiKTtcbiAgICAgICAgZ2V0Q2FsZW5kYXJVc2VycyhzZWxlY3RDYWxlbmRhcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbaXNBZG1pbiwgc2VsZWN0Q2FsZW5kYXJdXG4gICk7XG5cbiAgY29uc3Qgb25BZG1pbkNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50PikgPT4ge1xuICAgICAgaWYgKGlzQWRtaW4pIHtcbiAgICAgICAgY29uc3QgeyB1c2VySWQsIGFkbWluWW4gfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0O1xuICAgICAgICBhd2FpdCBheGlvcy5wYXRjaChgL2RpYXJ5L2NhbGVuZGFyLyR7c2VsZWN0Q2FsZW5kYXJ9YCwge1xuICAgICAgICAgIHRhcmdldElkOiB1c2VySWQsXG4gICAgICAgICAgYWRtaW5ZbjogYWRtaW5ZbiA9PT0gXCJZXCIgPyBcIk5cIiA6IFwiWVwiLFxuICAgICAgICB9KTtcbiAgICAgICAgZ2V0Q2FsZW5kYXJVc2VycyhzZWxlY3RDYWxlbmRhcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbaXNBZG1pbiwgc2VsZWN0Q2FsZW5kYXJdXG4gICk7XG5cbiAgY29uc3QgQ2FsZW5kYXJHcm91cEl0ZW1zID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgY2FsZW5kYXJzLm1hcCgoeyBuYW1lLCBjYWxlbmRhcklkIH0pID0+IChcbiAgICAgICAgPEdyb3VwSXRlbVxuICAgICAgICAgIGtleT17YGNhbGVuZGFyLWdyb3VwLSR7Y2FsZW5kYXJJZH1gfVxuICAgICAgICAgIGlzT249e3NlbGVjdENhbGVuZGFyID09PSBjYWxlbmRhcklkfVxuICAgICAgICAgIGRhdGEtY2FsZW5kYXItaWQ9e2NhbGVuZGFySWR9XG4gICAgICAgICAgb25DbGljaz17b25TZWxlY3RDYWxlbmRhcn1cbiAgICAgICAgPlxuICAgICAgICAgIHtuYW1lfVxuICAgICAgICA8L0dyb3VwSXRlbT5cbiAgICAgICkpLFxuICAgIFtzZWxlY3RDYWxlbmRhcl1cbiAgKTtcblxuICBjb25zdCBDYWxlbmRhck1lbWJlckl0ZW1zID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgdXNlcnMubWFwKCh1c2VyLCBpZHgpID0+IChcbiAgICAgICAgPHRyIGtleT17YGNhbGVuZGFyLWdyb3VwLXVzZXItJHtpZHh9YH0+XG4gICAgICAgICAgPE5hbWU+XG4gICAgICAgICAgICB7dXNlci5rb3JubX0oe3VzZXIubG9naW5JZH0pXG4gICAgICAgICAgPC9OYW1lPlxuICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgZGF0YS11c2VyLWlkPXt1c2VyLnVzZXJJZH1cbiAgICAgICAgICAgIGRhdGEtYWRtaW4teW49e1s1LCA5XS5pbmNsdWRlcyh1c2VyLmx2KSA/IFwiWVwiIDogXCJOXCJ9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkFkbWluQ2xpY2t9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge1s1LCA5XS5pbmNsdWRlcyh1c2VyLmx2KSAmJiA8QmFzaWNDaGVjayAvPn1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIHtpc0FkbWluICYmIChcbiAgICAgICAgICAgICAgPEtpY2tCdXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkRlbGV0ZVVzZXJDbGlja31cbiAgICAgICAgICAgICAgICBkYXRhLXVzZXItaWQ9e3VzZXIudXNlcklkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIHt1c2VyLmludml0ZVluICYmIChcbiAgICAgICAgICAgICAgPEludml0ZVRleHQ+XG4gICAgICAgICAgICAgICAge3VzZXIuaW52aXRlWW4gPT09IFwiTlwiID8gXCLstIjrjIAg6rGw7KCIXCIgOiBcIuy0iOuMgCDspJFcIn1cbiAgICAgICAgICAgICAgPC9JbnZpdGVUZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgKSksXG4gICAgW3VzZXJzLCBpc0FkbWluXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPE15UGFnZUxheW91dD5cbiAgICAgIDxHcm91cFdyYXA+XG4gICAgICAgIDxHcm91cFRhYmxlPlxuICAgICAgICAgIDxUYWJsZVRvcD5cbiAgICAgICAgICAgIDxwPuq3uOujueuqhTwvcD5cbiAgICAgICAgICA8L1RhYmxlVG9wPlxuICAgICAgICAgIDxUYWJsZUNvbnQ+XG4gICAgICAgICAgICA8R3JvdXBMaXN0PntDYWxlbmRhckdyb3VwSXRlbXN9PC9Hcm91cExpc3Q+XG4gICAgICAgICAgPC9UYWJsZUNvbnQ+XG4gICAgICAgICAgPFRhYmxlQnRtPlxuICAgICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPVwi7LaU6rCA7ZWY7IukIOq3uOujueuqheydhCDsoIHslrTso7zshLjsmpRcIiBpZD1cImdyb3VwTmFtZVwiIC8+XG4gICAgICAgICAgICA8Qmx1ZUJ1dHRvbiBvbkNsaWNrPXtvbkFkZEdyb3VwQ2xpY2t9Puq3uOujuey2lOqwgDwvQmx1ZUJ1dHRvbj5cbiAgICAgICAgICA8L1RhYmxlQnRtPlxuICAgICAgICA8L0dyb3VwVGFibGU+XG4gICAgICAgIDxNYW5hZ2VUYWJsZT5cbiAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICA8Y29sZ3JvdXA+XG4gICAgICAgICAgICAgIDxjb2wgd2lkdGg9XCIqXCIgLz5cbiAgICAgICAgICAgICAgPGNvbCB3aWR0aD1cIjUwcHhcIiAvPlxuICAgICAgICAgICAgICA8Y29sIHdpZHRoPVwiNTBweFwiIC8+XG4gICAgICAgICAgICAgIDxjb2wgd2lkdGg9XCI1MHB4XCIgLz5cbiAgICAgICAgICAgIDwvY29sZ3JvdXA+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+6re466O57JuQPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+6rSA66as7J6QPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+7YOI7Ye0PC90aD5cbiAgICAgICAgICAgICAgICA8dGg+7LSI64yAPC90aD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8TWFuYWdlVXNlclRhYmxlPlxuICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICA8Y29sZ3JvdXA+XG4gICAgICAgICAgICAgICAgPGNvbCB3aWR0aD1cIipcIiAvPlxuICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9XCI1MHB4XCIgLz5cbiAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPVwiNTBweFwiIC8+XG4gICAgICAgICAgICAgICAgPGNvbCB3aWR0aD1cIjUwcHhcIiAvPlxuICAgICAgICAgICAgICA8L2NvbGdyb3VwPlxuICAgICAgICAgICAgICA8dGJvZHk+e0NhbGVuZGFyTWVtYmVySXRlbXN9PC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgPC9NYW5hZ2VVc2VyVGFibGU+XG4gICAgICAgIDwvTWFuYWdlVGFibGU+XG4gICAgICAgIHtpc0FkbWluICYmIChcbiAgICAgICAgICA8SW52aXRlVXNlclRhYmxlXG4gICAgICAgICAgICBjYWxlbmRhcklkPXtzZWxlY3RDYWxlbmRhcn1cbiAgICAgICAgICAgIHVzZXJzPXt1c2Vyc31cbiAgICAgICAgICAgIHJlZnJlc2hVc2VyTGlzdD17KCkgPT4ge1xuICAgICAgICAgICAgICBnZXRDYWxlbmRhclVzZXJzKHNlbGVjdENhbGVuZGFyKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvR3JvdXBXcmFwPlxuICAgIDwvTXlQYWdlTGF5b3V0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlcnZlclNpZGVQcm9wczogR2V0U2VydmVyU2lkZVByb3BzID0gYXN5bmMgKGN0eCkgPT4ge1xuICBjb25zdCB7IGRhdGE6IGNhbGVuZGFycyB9ID0gYXdhaXQgc2VydmVyQXhpb3MoY3R4KS5nZXQoXCIvZGlhcnkvY2FsZW5kYXJcIik7XG4gIHJldHVybiB7IHByb3BzOiB7IGNhbGVuZGFycyB9IH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNeUdyb3VwUGFnZTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst TableCont = _styled(\"div\", {\n  target: \"egy7v1f10\",\n  label: \"TableCont\"\n})(true ? {\n  name: \"umwchj\",\n  styles: \"overflow-y:auto\"\n} : {\n  name: \"umwchj\",\n  styles: \"overflow-y:auto\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst GroupList = _styled(\"ul\", {\n  target: \"egy7v1f9\",\n  label: \"GroupList\"\n})(true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst GroupItem = _styled(\"li\", {\n  target: \"egy7v1f8\",\n  label: \"GroupItem\"\n})(\"height:36px;line-height:34px;padding-left:7px;font-size:14px;border-bottom:1px solid #dbdbdb;box-sizing:border-box;cursor:pointer;color:\", props => props.isOn ? \"#fff\" : \"#f5f6f8\", \";background-color:\", props => props.isOn ? \"#6485ae\" : \"#888e9c\", \";\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst TableTop = _styled(\"div\", {\n  target: \"egy7v1f7\",\n  label: \"TableTop\"\n})(true ? {\n  name: \"1w0uarj\",\n  styles: \"height:42px;background:#fafafa;border-bottom:1px solid #eeeeee;box-sizing:border-box;>p{line-height:42px;font-size:14px;font-weight:500;color:#252525;text-align:center;}\"\n} : {\n  name: \"1w0uarj\",\n  styles: \"height:42px;background:#fafafa;border-bottom:1px solid #eeeeee;box-sizing:border-box;>p{line-height:42px;font-size:14px;font-weight:500;color:#252525;text-align:center;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst TableBtm = _styled(\"div\", {\n  target: \"egy7v1f6\",\n  label: \"TableBtm\"\n})(\"height:110px;padding:10px;box-sizing:border-box;display:flex;flex-direction:column;margin-top:auto;z-index:2;>input{height:36px;}>\", BlueButton, \"{margin-top:auto;width:100%;height:40px;border-radius:5px;}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst ManageTable = _styled(\"div\", {\n  target: \"egy7v1f5\",\n  label: \"ManageTable\"\n})(true ? {\n  name: \"sy1x0z\",\n  styles: \"width:350px;margin-left:10px;height:100%;border:1px solid #dbdbdb;border-top:1px solid #454545;box-sizing:border-box;>table{width:100%;table-layout:fixed;>thead{background:#fafafa;border-bottom:1px solid #eeeeee;box-sizing:border-box;th{line-height:42px;font-size:14px;font-weight:500;color:#252525;border-right:1px solid #dbdbdb;border-bottom:1px solid #eee;&:last-child{border-right:none;}}}}\"\n} : {\n  name: \"sy1x0z\",\n  styles: \"width:350px;margin-left:10px;height:100%;border:1px solid #dbdbdb;border-top:1px solid #454545;box-sizing:border-box;>table{width:100%;table-layout:fixed;>thead{background:#fafafa;border-bottom:1px solid #eeeeee;box-sizing:border-box;th{line-height:42px;font-size:14px;font-weight:500;color:#252525;border-right:1px solid #dbdbdb;border-bottom:1px solid #eee;&:last-child{border-right:none;}}}}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst ManageUserTable = _styled(\"div\", {\n  target: \"egy7v1f4\",\n  label: \"ManageUserTable\"\n})(true ? {\n  name: \"1y6g1c\",\n  styles: \"height:calc(100% - 44px);overflow-y:auto;table{width:100%;table-layout:fixed;tbody{tr{height:36px;border-bottom:1px solid #eee;}td{font-size:14px;color:#454545;border-right:1px solid #dbdbdb;cursor:pointer;&:nth-of-type(1){cursor:default;}&:last-child{border-right:none;}}input[type=\\\"checkbox\\\"]{display:none;width:0;height:0;}}}\"\n} : {\n  name: \"1y6g1c\",\n  styles: \"height:calc(100% - 44px);overflow-y:auto;table{width:100%;table-layout:fixed;tbody{tr{height:36px;border-bottom:1px solid #eee;}td{font-size:14px;color:#454545;border-right:1px solid #dbdbdb;cursor:pointer;&:nth-of-type(1){cursor:default;}&:last-child{border-right:none;}}input[type=\\\"checkbox\\\"]{display:none;width:0;height:0;}}}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Name = _styled(\"td\", {\n  target: \"egy7v1f3\",\n  label: \"Name\"\n})(true ? {\n  name: \"14h1yhk\",\n  styles: \"padding:0 9px;box-sizing:border-box\"\n} : {\n  name: \"14h1yhk\",\n  styles: \"padding:0 9px;box-sizing:border-box\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2VtcC9mcm9udC9uZXh0L3NyYy9wYWdlcy91c2VyL2dyb3VwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEySXNCIiwiZmlsZSI6Ii9ob21lL2VtcC9mcm9udC9uZXh0L3NyYy9wYWdlcy91c2VyL2dyb3VwLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVCdXR0b24gfSBmcm9tIFwiQGNvbXBvbmVudHMvY29tbW9uL2J1dHRvblwiO1xuaW1wb3J0IE15UGFnZUxheW91dCBmcm9tIFwiQGNvbXBvbmVudHMvbGF5b3V0L215cGFnZVwiO1xuaW1wb3J0IEludml0ZVVzZXJUYWJsZSBmcm9tIFwiQGNvbXBvbmVudHMvbXlwYWdlL2dyb3VwL0ludml0ZVVzZXJUYWJsZVwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgQ29sb3JVdGlsIGZyb20gXCJAdXRpbHMvY29sb3IudXRpbFwiO1xuaW1wb3J0IHsgYXhpb3MsIHNlcnZlckF4aW9zIH0gZnJvbSBcIkB1dGlscy9uZXR3b3JrLnV0aWxcIjtcbmltcG9ydCB7IEdldFNlcnZlclNpZGVQcm9wcyB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vI3JlZ2lvbiBzdHlsZWRcbmNvbnN0IEdyb3VwVGFibGUgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkYmRiZGI7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNDU0NTQ1O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogMjIwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBHcm91cFdyYXAgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7XG5gO1xuXG5jb25zdCBUYWJsZUNvbnQgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuYDtcblxuY29uc3QgR3JvdXBMaXN0ID0gc3R5bGVkLnVsYGA7XG5jb25zdCBHcm91cEl0ZW0gPSBzdHlsZWQubGk8eyBpc09uPzogYm9vbGVhbiB9PmBcbiAgaGVpZ2h0OiAzNnB4O1xuICBsaW5lLWhlaWdodDogMzRweDtcbiAgcGFkZGluZy1sZWZ0OiA3cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkYmRiZGI7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICR7KHByb3BzKSA9PiAocHJvcHMuaXNPbiA/IFwiI2ZmZlwiIDogXCIjZjVmNmY4XCIpfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsocHJvcHMpID0+IChwcm9wcy5pc09uID8gXCIjNjQ4NWFlXCIgOiBcIiM4ODhlOWNcIil9O1xuYDtcblxuY29uc3QgVGFibGVUb3AgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDQycHg7XG4gIGJhY2tncm91bmQ6ICNmYWZhZmE7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICA+IHAge1xuICAgIGxpbmUtaGVpZ2h0OiA0MnB4O1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGNvbG9yOiAjMjUyNTI1O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuYDtcblxuY29uc3QgVGFibGVCdG0gPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDExMHB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiBhdXRvO1xuICB6LWluZGV4OiAyO1xuICA+IGlucHV0IHtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gIH1cbiAgPiAke0JsdWVCdXR0b259IHtcbiAgICBtYXJnaW4tdG9wOiBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNDBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIH1cbmA7XG5cbmNvbnN0IE1hbmFnZVRhYmxlID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDM1MHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGJkYmRiO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzQ1NDU0NTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgPiB0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGFibGUtbGF5b3V0OiBmaXhlZDtcbiAgICA+IHRoZWFkIHtcbiAgICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZWVlZTtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgICAgIHRoIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQycHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgY29sb3I6ICMyNTI1MjU7XG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkYmRiZGI7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xuICAgICAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICAgIGJvcmRlci1yaWdodDogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgTWFuYWdlVXNlclRhYmxlID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA0NHB4KTtcbiAgb3ZlcmZsb3cteTogYXV0bztcblxuICB0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGFibGUtbGF5b3V0OiBmaXhlZDtcbiAgICB0Ym9keSB7XG4gICAgICB0ciB7XG4gICAgICAgIGhlaWdodDogMzZweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7XG4gICAgICB9XG4gICAgICB0ZCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgY29sb3I6ICM0NTQ1NDU7XG4gICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkYmRiZGI7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgJjpudGgtb2YtdHlwZSgxKSB7XG4gICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgTmFtZSA9IHN0eWxlZC50ZGBcbiAgcGFkZGluZzogMCA5cHg7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5gO1xuXG5jb25zdCBCYXNpY0NoZWNrID0gc3R5bGVkLnNwYW5gXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMzVweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIvaW1hZ2VzL2J0bi9idG5fZ3JvdXBfY2hlY2sucG5nXCIpIGNlbnRlciBuby1yZXBlYXQ7XG5gO1xuXG5jb25zdCBJbnZpdGVUZXh0ID0gc3R5bGVkLnNwYW5gXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjBweDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogI2VmODQyNTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuY29uc3QgS2lja0J1dHRvbiA9IHN0eWxlZC5zcGFuYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDM1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYmFja2dyb3VuZDogdXJsKFwiL2ltYWdlcy9idG4vYnRuX3dpdGhkcmF3LnBuZ1wiKSBjZW50ZXIgbm8tcmVwZWF0O1xuYDtcbi8vI2VuZHJlZ2lvblxuXG50eXBlIE15R3JvdXBQYWdlUHJvcHMgPSB7XG4gIGNhbGVuZGFyczogQ2FsZW5kYXJVc3JbXTtcbn07XG5cbnR5cGUgVXNlciA9IHtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIGxvZ2luSWQ6IHN0cmluZztcbiAga29ybm06IHN0cmluZztcbiAgbW9iaWxlOiBzdHJpbmc7XG4gIGx2OiBudW1iZXI7XG4gIGludml0ZVluOiBZTjtcbn07XG5cbmNvbnN0IE15R3JvdXBQYWdlID0gKHsgY2FsZW5kYXJzIH06IE15R3JvdXBQYWdlUHJvcHMpID0+IHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IFtzZWxlY3RDYWxlbmRhciwgc2V0U2VsZWN0Q2FsZW5kYXJdID0gdXNlU3RhdGU8c3RyaW5nPigpO1xuICBjb25zdCBbaXNBZG1pbiwgc2V0QWRtaW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbdXNlcnMsIHNldFVzZXJzXSA9IHVzZVN0YXRlPFVzZXJbXT4oW10pO1xuXG4gIGNvbnN0IGdldENhbGVuZGFyVXNlcnMgPSB1c2VDYWxsYmFjayhhc3luYyAoY2FsZW5kYXJJZDogc3RyaW5nKSA9PiB7XG4gICAgc2V0U2VsZWN0Q2FsZW5kYXIoY2FsZW5kYXJJZCk7XG4gICAgaWYgKGNhbGVuZGFySWQpIHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdXNlckNhbGVuZGFyIH0gPSBhd2FpdCBheGlvcy5nZXQoXG4gICAgICAgIGAvZGlhcnkvY2FsZW5kYXIvJHtjYWxlbmRhcklkfWBcbiAgICAgICk7XG4gICAgICAvLyDqtIDrpqzsnpAg6raM7ZWcIOyytO2BrFxuICAgICAgaWYgKFs1LCA5XS5pbmNsdWRlcyh1c2VyQ2FsZW5kYXIubHYpKSB7XG4gICAgICAgIHNldEFkbWluKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0QWRtaW4oZmFsc2UpO1xuICAgICAgfVxuICAgICAgLy8g7IKs7Jqp7J6QIOu2iOufrOyYpOq4sFxuICAgICAgY29uc3QgeyBkYXRhOiB1c2VycyB9ID0gYXdhaXQgYXhpb3MuZ2V0PFVzZXJbXT4oXG4gICAgICAgIGAvZGlhcnkvY2FsZW5kYXIvJHtjYWxlbmRhcklkfS91c2Vyc2BcbiAgICAgICk7XG4gICAgICBzZXRVc2Vycyh1c2Vycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFVzZXJzKFtdKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBvblNlbGVjdENhbGVuZGFyID0gdXNlQ2FsbGJhY2soKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTExJRWxlbWVudD4pID0+IHtcbiAgICBnZXRDYWxlbmRhclVzZXJzKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGVuZGFySWQpO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBnZXRDYWxlbmRhclVzZXJzKGNhbGVuZGFyc1swXT8uY2FsZW5kYXJJZCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBvbkFkZEdyb3VwQ2xpY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PihcIiNncm91cE5hbWVcIilcbiAgICAgIC52YWx1ZS50cmltKCk7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBhbGVydChcIuyCrOyaqe2VmOyLpCDqt7jro7nrqoXsnYQg7KCB7Ja07KO87IS47JqUXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJnQ29sb3IgPSBDb2xvclV0aWwucmFuZG9tQ29sb3IoKTtcbiAgICBjb25zdCBjb2xvciA9IENvbG9yVXRpbC5pc0RhcmsoYmdDb2xvcikgPyBcIiNmZmZmZmZcIiA6IFwiIzMzMzMzM1wiO1xuXG4gICAgYXdhaXQgYXhpb3MucG9zdChcIi9kaWFyeS9jYWxlbmRhclwiLCB7IG5hbWUsIGJnQ29sb3IsIGNvbG9yIH0pO1xuXG4gICAgcm91dGVyLnJlbG9hZCgpO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgb25EZWxldGVVc2VyQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgIGlmIChpc0FkbWluKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlcklkIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICAgICAgYXdhaXQgYXhpb3MuZGVsZXRlKGAvZGlhcnkvY2FsZW5kYXIvJHtzZWxlY3RDYWxlbmRhcn0vJHt1c2VySWR9YCk7XG4gICAgICAgIGFsZXJ0KFwi7IKt7KCc65CY7JeI7Iq164uI64ukLlwiKTtcbiAgICAgICAgZ2V0Q2FsZW5kYXJVc2VycyhzZWxlY3RDYWxlbmRhcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbaXNBZG1pbiwgc2VsZWN0Q2FsZW5kYXJdXG4gICk7XG5cbiAgY29uc3Qgb25BZG1pbkNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50PikgPT4ge1xuICAgICAgaWYgKGlzQWRtaW4pIHtcbiAgICAgICAgY29uc3QgeyB1c2VySWQsIGFkbWluWW4gfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0O1xuICAgICAgICBhd2FpdCBheGlvcy5wYXRjaChgL2RpYXJ5L2NhbGVuZGFyLyR7c2VsZWN0Q2FsZW5kYXJ9YCwge1xuICAgICAgICAgIHRhcmdldElkOiB1c2VySWQsXG4gICAgICAgICAgYWRtaW5ZbjogYWRtaW5ZbiA9PT0gXCJZXCIgPyBcIk5cIiA6IFwiWVwiLFxuICAgICAgICB9KTtcbiAgICAgICAgZ2V0Q2FsZW5kYXJVc2VycyhzZWxlY3RDYWxlbmRhcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbaXNBZG1pbiwgc2VsZWN0Q2FsZW5kYXJdXG4gICk7XG5cbiAgY29uc3QgQ2FsZW5kYXJHcm91cEl0ZW1zID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgY2FsZW5kYXJzLm1hcCgoeyBuYW1lLCBjYWxlbmRhcklkIH0pID0+IChcbiAgICAgICAgPEdyb3VwSXRlbVxuICAgICAgICAgIGtleT17YGNhbGVuZGFyLWdyb3VwLSR7Y2FsZW5kYXJJZH1gfVxuICAgICAgICAgIGlzT249e3NlbGVjdENhbGVuZGFyID09PSBjYWxlbmRhcklkfVxuICAgICAgICAgIGRhdGEtY2FsZW5kYXItaWQ9e2NhbGVuZGFySWR9XG4gICAgICAgICAgb25DbGljaz17b25TZWxlY3RDYWxlbmRhcn1cbiAgICAgICAgPlxuICAgICAgICAgIHtuYW1lfVxuICAgICAgICA8L0dyb3VwSXRlbT5cbiAgICAgICkpLFxuICAgIFtzZWxlY3RDYWxlbmRhcl1cbiAgKTtcblxuICBjb25zdCBDYWxlbmRhck1lbWJlckl0ZW1zID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgdXNlcnMubWFwKCh1c2VyLCBpZHgpID0+IChcbiAgICAgICAgPHRyIGtleT17YGNhbGVuZGFyLWdyb3VwLXVzZXItJHtpZHh9YH0+XG4gICAgICAgICAgPE5hbWU+XG4gICAgICAgICAgICB7dXNlci5rb3JubX0oe3VzZXIubG9naW5JZH0pXG4gICAgICAgICAgPC9OYW1lPlxuICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgZGF0YS11c2VyLWlkPXt1c2VyLnVzZXJJZH1cbiAgICAgICAgICAgIGRhdGEtYWRtaW4teW49e1s1LCA5XS5pbmNsdWRlcyh1c2VyLmx2KSA/IFwiWVwiIDogXCJOXCJ9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkFkbWluQ2xpY2t9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge1s1LCA5XS5pbmNsdWRlcyh1c2VyLmx2KSAmJiA8QmFzaWNDaGVjayAvPn1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIHtpc0FkbWluICYmIChcbiAgICAgICAgICAgICAgPEtpY2tCdXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkRlbGV0ZVVzZXJDbGlja31cbiAgICAgICAgICAgICAgICBkYXRhLXVzZXItaWQ9e3VzZXIudXNlcklkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIHt1c2VyLmludml0ZVluICYmIChcbiAgICAgICAgICAgICAgPEludml0ZVRleHQ+XG4gICAgICAgICAgICAgICAge3VzZXIuaW52aXRlWW4gPT09IFwiTlwiID8gXCLstIjrjIAg6rGw7KCIXCIgOiBcIuy0iOuMgCDspJFcIn1cbiAgICAgICAgICAgICAgPC9JbnZpdGVUZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgKSksXG4gICAgW3VzZXJzLCBpc0FkbWluXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPE15UGFnZUxheW91dD5cbiAgICAgIDxHcm91cFdyYXA+XG4gICAgICAgIDxHcm91cFRhYmxlPlxuICAgICAgICAgIDxUYWJsZVRvcD5cbiAgICAgICAgICAgIDxwPuq3uOujueuqhTwvcD5cbiAgICAgICAgICA8L1RhYmxlVG9wPlxuICAgICAgICAgIDxUYWJsZUNvbnQ+XG4gICAgICAgICAgICA8R3JvdXBMaXN0PntDYWxlbmRhckdyb3VwSXRlbXN9PC9Hcm91cExpc3Q+XG4gICAgICAgICAgPC9UYWJsZUNvbnQ+XG4gICAgICAgICAgPFRhYmxlQnRtPlxuICAgICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPVwi7LaU6rCA7ZWY7IukIOq3uOujueuqheydhCDsoIHslrTso7zshLjsmpRcIiBpZD1cImdyb3VwTmFtZVwiIC8+XG4gICAgICAgICAgICA8Qmx1ZUJ1dHRvbiBvbkNsaWNrPXtvbkFkZEdyb3VwQ2xpY2t9Puq3uOujuey2lOqwgDwvQmx1ZUJ1dHRvbj5cbiAgICAgICAgICA8L1RhYmxlQnRtPlxuICAgICAgICA8L0dyb3VwVGFibGU+XG4gICAgICAgIDxNYW5hZ2VUYWJsZT5cbiAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICA8Y29sZ3JvdXA+XG4gICAgICAgICAgICAgIDxjb2wgd2lkdGg9XCIqXCIgLz5cbiAgICAgICAgICAgICAgPGNvbCB3aWR0aD1cIjUwcHhcIiAvPlxuICAgICAgICAgICAgICA8Y29sIHdpZHRoPVwiNTBweFwiIC8+XG4gICAgICAgICAgICAgIDxjb2wgd2lkdGg9XCI1MHB4XCIgLz5cbiAgICAgICAgICAgIDwvY29sZ3JvdXA+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+6re466O57JuQPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+6rSA66as7J6QPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+7YOI7Ye0PC90aD5cbiAgICAgICAgICAgICAgICA8dGg+7LSI64yAPC90aD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8TWFuYWdlVXNlclRhYmxlPlxuICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICA8Y29sZ3JvdXA+XG4gICAgICAgICAgICAgICAgPGNvbCB3aWR0aD1cIipcIiAvPlxuICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9XCI1MHB4XCIgLz5cbiAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPVwiNTBweFwiIC8+XG4gICAgICAgICAgICAgICAgPGNvbCB3aWR0aD1cIjUwcHhcIiAvPlxuICAgICAgICAgICAgICA8L2NvbGdyb3VwPlxuICAgICAgICAgICAgICA8dGJvZHk+e0NhbGVuZGFyTWVtYmVySXRlbXN9PC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgPC9NYW5hZ2VVc2VyVGFibGU+XG4gICAgICAgIDwvTWFuYWdlVGFibGU+XG4gICAgICAgIHtpc0FkbWluICYmIChcbiAgICAgICAgICA8SW52aXRlVXNlclRhYmxlXG4gICAgICAgICAgICBjYWxlbmRhcklkPXtzZWxlY3RDYWxlbmRhcn1cbiAgICAgICAgICAgIHVzZXJzPXt1c2Vyc31cbiAgICAgICAgICAgIHJlZnJlc2hVc2VyTGlzdD17KCkgPT4ge1xuICAgICAgICAgICAgICBnZXRDYWxlbmRhclVzZXJzKHNlbGVjdENhbGVuZGFyKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvR3JvdXBXcmFwPlxuICAgIDwvTXlQYWdlTGF5b3V0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlcnZlclNpZGVQcm9wczogR2V0U2VydmVyU2lkZVByb3BzID0gYXN5bmMgKGN0eCkgPT4ge1xuICBjb25zdCB7IGRhdGE6IGNhbGVuZGFycyB9ID0gYXdhaXQgc2VydmVyQXhpb3MoY3R4KS5nZXQoXCIvZGlhcnkvY2FsZW5kYXJcIik7XG4gIHJldHVybiB7IHByb3BzOiB7IGNhbGVuZGFycyB9IH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNeUdyb3VwUGFnZTtcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst BasicCheck = _styled(\"span\", {\n  target: \"egy7v1f2\",\n  label: \"BasicCheck\"\n})(true ? {\n  name: \"1e7vav5\",\n  styles: \"display:inline-block;width:100%;height:35px;cursor:pointer;box-sizing:border-box;background:url(\\\"/images/btn/btn_group_check.png\\\") center no-repeat\"\n} : {\n  name: \"1e7vav5\",\n  styles: \"display:inline-block;width:100%;height:35px;cursor:pointer;box-sizing:border-box;background:url(\\\"/images/btn/btn_group_check.png\\\") center no-repeat\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst InviteText = _styled(\"span\", {\n  target: \"egy7v1f1\",\n  label: \"InviteText\"\n})(true ? {\n  name: \"13cgm9f\",\n  styles: \"display:block;width:100%;height:20px;line-height:20px;font-size:12px;color:#ef8425;text-align:center\"\n} : {\n  name: \"13cgm9f\",\n  styles: \"display:block;width:100%;height:20px;line-height:20px;font-size:12px;color:#ef8425;text-align:center\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst KickButton = _styled(\"span\", {\n  target: \"egy7v1f0\",\n  label: \"KickButton\"\n})(true ? {\n  name: \"9b3fwr\",\n  styles: \"display:inline-block;width:100%;height:35px;cursor:pointer;box-sizing:border-box;background:url(\\\"/images/btn/btn_withdraw.png\\\") center no-repeat\"\n} : {\n  name: \"9b3fwr\",\n  styles: \"display:inline-block;width:100%;height:35px;cursor:pointer;box-sizing:border-box;background:url(\\\"/images/btn/btn_withdraw.png\\\") center no-repeat\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n}); //#endregion\n\n\nconst MyGroupPage = ({\n  calendars\n}) => {\n  const router = useRouter();\n  const {\n    0: selectCalendar,\n    1: setSelectCalendar\n  } = useState();\n  const {\n    0: isAdmin,\n    1: setAdmin\n  } = useState(false);\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const getCalendarUsers = useCallback(async calendarId => {\n    setSelectCalendar(calendarId);\n\n    if (calendarId) {\n      const {\n        data: userCalendar\n      } = await axios.get(`/diary/calendar/${calendarId}`); // 관리자 권한 체크\n\n      if ([5, 9].includes(userCalendar.lv)) {\n        setAdmin(true);\n      } else {\n        setAdmin(false);\n      } // 사용자 불러오기\n\n\n      const {\n        data: users\n      } = await axios.get(`/diary/calendar/${calendarId}/users`);\n      setUsers(users);\n    } else {\n      setUsers([]);\n    }\n  }, []);\n  const onSelectCalendar = useCallback(e => {\n    getCalendarUsers(e.currentTarget.dataset.calendarId);\n  }, []);\n  useEffect(() => {\n    var _calendars$;\n\n    getCalendarUsers((_calendars$ = calendars[0]) === null || _calendars$ === void 0 ? void 0 : _calendars$.calendarId);\n  }, []);\n  const onAddGroupClick = useCallback(async () => {\n    const name = document.querySelector(\"#groupName\").value.trim();\n\n    if (!name) {\n      alert(\"사용하실 그룹명을 적어주세요\");\n      return;\n    }\n\n    const bgColor = ColorUtil.randomColor();\n    const color = ColorUtil.isDark(bgColor) ? \"#ffffff\" : \"#333333\";\n    await axios.post(\"/diary/calendar\", {\n      name,\n      bgColor,\n      color\n    });\n    router.reload();\n  }, []);\n  const onDeleteUserClick = useCallback(async e => {\n    if (isAdmin) {\n      const {\n        userId\n      } = e.currentTarget.dataset;\n      await axios.delete(`/diary/calendar/${selectCalendar}/${userId}`);\n      alert(\"삭제되었습니다.\");\n      getCalendarUsers(selectCalendar);\n    }\n  }, [isAdmin, selectCalendar]);\n  const onAdminClick = useCallback(async e => {\n    if (isAdmin) {\n      const {\n        userId,\n        adminYn\n      } = e.currentTarget.dataset;\n      await axios.patch(`/diary/calendar/${selectCalendar}`, {\n        targetId: userId,\n        adminYn: adminYn === \"Y\" ? \"N\" : \"Y\"\n      });\n      getCalendarUsers(selectCalendar);\n    }\n  }, [isAdmin, selectCalendar]);\n  const CalendarGroupItems = useMemo(() => calendars.map(({\n    name,\n    calendarId\n  }) => /*#__PURE__*/_jsx(GroupItem, {\n    isOn: selectCalendar === calendarId,\n    \"data-calendar-id\": calendarId,\n    onClick: onSelectCalendar,\n    children: name\n  }, `calendar-group-${calendarId}`)), [selectCalendar]);\n  const CalendarMemberItems = useMemo(() => users.map((user, idx) => /*#__PURE__*/_jsxs(\"tr\", {\n    children: [/*#__PURE__*/_jsxs(Name, {\n      children: [user.kornm, \"(\", user.loginId, \")\"]\n    }), /*#__PURE__*/_jsx(\"td\", {\n      \"data-user-id\": user.userId,\n      \"data-admin-yn\": [5, 9].includes(user.lv) ? \"Y\" : \"N\",\n      onClick: onAdminClick,\n      children: [5, 9].includes(user.lv) && /*#__PURE__*/_jsx(BasicCheck, {})\n    }), /*#__PURE__*/_jsx(\"td\", {\n      children: isAdmin && /*#__PURE__*/_jsx(KickButton, {\n        onClick: onDeleteUserClick,\n        \"data-user-id\": user.userId\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      children: user.inviteYn && /*#__PURE__*/_jsx(InviteText, {\n        children: user.inviteYn === \"N\" ? \"초대 거절\" : \"초대 중\"\n      })\n    })]\n  }, `calendar-group-user-${idx}`)), [users, isAdmin]);\n  return /*#__PURE__*/_jsx(MyPageLayout, {\n    children: /*#__PURE__*/_jsxs(GroupWrap, {\n      children: [/*#__PURE__*/_jsxs(GroupTable, {\n        children: [/*#__PURE__*/_jsx(TableTop, {\n          children: /*#__PURE__*/_jsx(\"p\", {\n            children: \"\\uADF8\\uB8F9\\uBA85\"\n          })\n        }), /*#__PURE__*/_jsx(TableCont, {\n          children: /*#__PURE__*/_jsx(GroupList, {\n            children: CalendarGroupItems\n          })\n        }), /*#__PURE__*/_jsxs(TableBtm, {\n          children: [/*#__PURE__*/_jsx(\"input\", {\n            placeholder: \"\\uCD94\\uAC00\\uD558\\uC2E4 \\uADF8\\uB8F9\\uBA85\\uC744 \\uC801\\uC5B4\\uC8FC\\uC138\\uC694\",\n            id: \"groupName\"\n          }), /*#__PURE__*/_jsx(BlueButton, {\n            onClick: onAddGroupClick,\n            children: \"\\uADF8\\uB8F9\\uCD94\\uAC00\"\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(ManageTable, {\n        children: [/*#__PURE__*/_jsxs(\"table\", {\n          children: [/*#__PURE__*/_jsxs(\"colgroup\", {\n            children: [/*#__PURE__*/_jsx(\"col\", {\n              width: \"*\"\n            }), /*#__PURE__*/_jsx(\"col\", {\n              width: \"50px\"\n            }), /*#__PURE__*/_jsx(\"col\", {\n              width: \"50px\"\n            }), /*#__PURE__*/_jsx(\"col\", {\n              width: \"50px\"\n            })]\n          }), /*#__PURE__*/_jsx(\"thead\", {\n            children: /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"th\", {\n                children: \"\\uADF8\\uB8F9\\uC6D0\"\n              }), /*#__PURE__*/_jsx(\"th\", {\n                children: \"\\uAD00\\uB9AC\\uC790\"\n              }), /*#__PURE__*/_jsx(\"th\", {\n                children: \"\\uD0C8\\uD1F4\"\n              }), /*#__PURE__*/_jsx(\"th\", {\n                children: \"\\uCD08\\uB300\"\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsx(ManageUserTable, {\n          children: /*#__PURE__*/_jsxs(\"table\", {\n            children: [/*#__PURE__*/_jsxs(\"colgroup\", {\n              children: [/*#__PURE__*/_jsx(\"col\", {\n                width: \"*\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"50px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"50px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"50px\"\n              })]\n            }), /*#__PURE__*/_jsx(\"tbody\", {\n              children: CalendarMemberItems\n            })]\n          })\n        })]\n      }), isAdmin && /*#__PURE__*/_jsx(InviteUserTable, {\n        calendarId: selectCalendar,\n        users: users,\n        refreshUserList: () => {\n          getCalendarUsers(selectCalendar);\n        }\n      })]\n    })\n  });\n};\n\nexport const getServerSideProps = async ctx => {\n  const {\n    data: calendars\n  } = await serverAxios(ctx).get(\"/diary/calendar\");\n  return {\n    props: {\n      calendars\n    }\n  };\n};\nexport default MyGroupPage;","map":null,"metadata":{},"sourceType":"module"}