{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DateUtil } from \"@utils/date.util\";\nimport { axios } from \"@utils/network.util\";\nimport { flow, makeAutoObservable, reaction, runInAction } from \"mobx\";\n\nclass CalendarStore {\n  constructor() {\n    _defineProperty(this, \"_date\", new Date());\n\n    _defineProperty(this, \"_userCalendars\", []);\n\n    _defineProperty(this, \"_commonCalendars\", []);\n\n    _defineProperty(this, \"_selects\", []);\n\n    _defineProperty(this, \"_calendar\", {});\n\n    _defineProperty(this, \"_holidayMap\", {});\n\n    makeAutoObservable(this, {\n      syncHolidays: flow\n    }); // 캘린더 이벤트 항목 불러오기\n\n    reaction(() => [this.calendars, this.date], () => {\n      this.syncCalendar();\n    }); // 특일정보 불러오기\n\n    reaction(() => this.date, async (date, prevDate) => {\n      if (date.getFullYear() !== (prevDate === null || prevDate === void 0 ? void 0 : prevDate.getFullYear())) {\n        this.syncHolidays();\n      }\n    });\n  }\n\n  get date() {\n    return this._date;\n  }\n\n  get calendars() {\n    return [...this._commonCalendars, ...this._userCalendars];\n  }\n\n  get calendarSort() {\n    return this.calendars.filter(event => this.selectIds.includes(event.calendarId)).map(({\n      calendarId\n    }) => calendarId);\n  }\n\n  get calendarMap() {\n    const calendarMap = {};\n    this.calendars.forEach(({\n      bgColor,\n      color,\n      calendarId\n    }) => {\n      calendarMap[calendarId] = {\n        bgColor,\n        color\n      };\n    });\n    return calendarMap;\n  }\n\n  get selectIds() {\n    return this._selects;\n  }\n\n  get calendar() {\n    const copyCalendar = {};\n    Object.keys(this._calendar).forEach(ymd => {\n      copyCalendar[ymd] = this._calendar[ymd].filter(event => this.selectIds.includes(event.calendarId)).sort((a, b) => {\n        const diff = b.colSpan - a.colSpan;\n        return diff === 0 ? this.calendarSort.indexOf(a.calendarId) - this.calendarSort.indexOf(b.calendarId) : diff; // const diff = DateUtil.diffDay(a.startDt, b.startDt);\n        // diff === 0\n        //   ? DateUtil.diffDay(new Date(b.endDt), new Date(b.startDt)) -\n        //       DateUtil.diffDay(new Date(a.endDt), new Date(a.startDt)) -\n        //(this.calendarSort.indexOf(b.calendarId) -\n        //         this.calendarSort.indexOf(a.calendarId))\n        //   : diff;\n      });\n    });\n    return copyCalendar;\n  }\n\n  get holidayMap() {\n    return this._holidayMap;\n  }\n\n  getCalendarData(calendarId) {\n    return this.calendarMap[calendarId];\n  }\n\n  setDate(date) {\n    this._date = date;\n  }\n\n  setUserCalendars(calendars) {\n    this._userCalendars = calendars;\n    this._selects = [...this._commonCalendars, ...calendars].map(({\n      calendarId\n    }) => calendarId);\n  }\n\n  setSelctes(selectIds) {\n    this._selects = selectIds;\n  }\n\n  setCalendar(calendar) {\n    this._calendar = calendar;\n  }\n\n  *syncHolidays() {\n    const date = this.date;\n    const holidayMap = {};\n    const {\n      data: specialDays\n    } = yield axios.get(`/diary/special/${date.getFullYear()}`);\n    specialDays.forEach((_ref) => {\n      let {\n        locDate,\n        sno\n      } = _ref,\n          data = _objectWithoutProperties(_ref, [\"locDate\", \"sno\"]);\n\n      if (sno === 0) {\n        holidayMap[locDate] = [data];\n      } else {\n        holidayMap[locDate].push(data);\n      }\n    });\n    this._holidayMap = holidayMap;\n  }\n\n  async syncCalendar() {\n    const {\n      date,\n      calendars\n    } = this;\n    const calendar = {};\n    const yyyymm = DateUtil.format(date, \"yyyyMM\");\n    const calendarStartDt = DateUtil.getCalendarStartDay(date);\n    const calendarEndDt = DateUtil.getCalendarLastDay(date);\n    await Promise.all(calendars.map(async ({\n      calendarId\n    }) => {\n      const {\n        data: events\n      } = await axios.get(`/diary/calendar/${calendarId}/event?yyyymm=${yyyymm}`);\n      events.forEach((_ref2) => {\n        let {\n          startDt: _startDt,\n          endDt: _endDt\n        } = _ref2,\n            event = _objectWithoutProperties(_ref2, [\"startDt\", \"endDt\"]);\n\n        const startDt = new Date(_startDt);\n        const endDt = new Date(_endDt);\n        const isBefore = DateUtil.diffDay(calendarStartDt, startDt) > 0;\n        const isAfter = DateUtil.diffDay(endDt, calendarEndDt) > 0;\n        let ymd = DateUtil.format(startDt, \"yyyyMMdd\");\n        let colSpan = DateUtil.diffDay(endDt, startDt) + 1;\n        let diffWeek = DateUtil.diffWeek(endDt, startDt);\n\n        if (isBefore) {\n          diffWeek = DateUtil.diffWeek(endDt, calendarStartDt);\n        } else if (isAfter) {\n          diffWeek = DateUtil.diffWeek(calendarEndDt, startDt);\n        }\n\n        if (diffWeek === 0) {\n          if (isBefore) {\n            ymd = DateUtil.format(calendarStartDt, \"yyyyMMdd\");\n            colSpan = DateUtil.diffDay(endDt, calendarStartDt) + 1;\n          } else if (isAfter) {\n            ymd = DateUtil.format(startDt, \"yyyyMMdd\");\n            colSpan = DateUtil.diffDay(calendarEndDt, startDt) + 1;\n          }\n\n          const data = _objectSpread(_objectSpread({}, event), {}, {\n            calendarId,\n            colSpan,\n            startDt,\n            endDt,\n            eventStartDt: startDt\n          });\n\n          if (calendar[ymd]) {\n            calendar[ymd].push(data);\n          } else {\n            calendar[ymd] = [data];\n          }\n        } else {\n          for (let i = 0; i < diffWeek + 1; i++) {\n            const eventStartDt = i === 0 ? isBefore ? calendarStartDt : startDt : DateUtil.getStartWeekDay(DateUtil.addDay(isBefore ? calendarStartDt : startDt, i * 7));\n            const weekLastDt = DateUtil.getLastWeekDay(eventStartDt);\n            const eventEnd = DateUtil.diffDay(weekLastDt, endDt) > 0 ? isAfter ? calendarEndDt : endDt : weekLastDt;\n            ymd = DateUtil.format(eventStartDt, \"yyyyMMdd\");\n            colSpan = DateUtil.diffDay(eventEnd, eventStartDt) + 1;\n\n            const data = _objectSpread(_objectSpread({}, event), {}, {\n              calendarId,\n              colSpan,\n              startDt,\n              endDt,\n              eventStartDt\n            });\n\n            if (calendar[ymd]) {\n              calendar[ymd].push(data);\n            } else {\n              calendar[ymd] = [data];\n            }\n          }\n        }\n      });\n    }));\n    runInAction(() => {\n      this.setCalendar(calendar);\n    });\n  }\n\n}\n\nconst calendarStore = new CalendarStore();\nexport default calendarStore;","map":null,"metadata":{},"sourceType":"module"}