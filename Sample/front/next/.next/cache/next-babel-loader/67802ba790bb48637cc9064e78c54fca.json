{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport { axios } from \"@utils/network.util\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport ContactItem from \"./ContactItem\";\nimport ContactPaging from \"./ContactPaging\"; //#region styled\n\nconst ContactPopWrap = _styled(\"div\", {\n  target: \"e1nfsorh9\",\n  label: \"ContactPopWrap\"\n})(true ? {\n  name: \"ofdpgv\",\n  styles: \"position:absolute;width:660px;height:620px;top:50px;right:30px;background:#fff;box-shadow:0px 3px 10px 0px rgba(0, 0, 0, 0.27);border-radius:10px;overflow:hidden;z-index:9\"\n} : {\n  name: \"ofdpgv\",\n  styles: \"position:absolute;width:660px;height:620px;top:50px;right:30px;background:#fff;box-shadow:0px 3px 10px 0px rgba(0, 0, 0, 0.27);border-radius:10px;overflow:hidden;z-index:9\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst PopTop = _styled(\"div\", {\n  target: \"e1nfsorh8\",\n  label: \"PopTop\"\n})(true ? {\n  name: \"rhy29w\",\n  styles: \"position:relative;background-color:#454545;padding:0 19px;box-sizing:border-box;>p{font-size:18px;font-weight:500;color:#ffffff;line-height:62px;}>button{position:absolute;top:50%;right:18px;transform:translateY(-50%);width:16px;height:16px;background:url(\\\"/images/btn/btn_close_white_16x16.png\\\") center no-repeat;}\"\n} : {\n  name: \"rhy29w\",\n  styles: \"position:relative;background-color:#454545;padding:0 19px;box-sizing:border-box;>p{font-size:18px;font-weight:500;color:#ffffff;line-height:62px;}>button{position:absolute;top:50%;right:18px;transform:translateY(-50%);width:16px;height:16px;background:url(\\\"/images/btn/btn_close_white_16x16.png\\\") center no-repeat;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst InputWrap = _styled(\"div\", {\n  target: \"e1nfsorh7\",\n  label: \"InputWrap\"\n})(true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst RefreshButton = _styled(\"button\", {\n  target: \"e1nfsorh6\",\n  label: \"RefreshButton\"\n})(true ? {\n  name: \"3teyc\",\n  styles: \"display:inline-block;width:32px;height:32px;background:#fff url(\\\"/images/btn/btn_reset.png\\\") center no-repeat;background-size:18px 21px;margin-left:7px;border:1px solid #dbdbdb;border-radius:5px;overflow:hidden;vertical-align:top\"\n} : {\n  name: \"3teyc\",\n  styles: \"display:inline-block;width:32px;height:32px;background:#fff url(\\\"/images/btn/btn_reset.png\\\") center no-repeat;background-size:18px 21px;margin-left:7px;border:1px solid #dbdbdb;border-radius:5px;overflow:hidden;vertical-align:top\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst SearchWrap = _styled(\"div\", {\n  target: \"e1nfsorh5\",\n  label: \"SearchWrap\"\n})(\"width:100%;height:56px;padding:10px 20px 14px;background-color:#f9f9f9;box-sizing:border-box;border-bottom:1px solid #dbdbdb;display:flex;justify-content:space-between;\", InputWrap, \"{display:inline-block;position:relative;input{height:32px;border-radius:5px;border:1px solid #dbdbdb;+button{position:absolute;top:0;right:3px;width:32px;height:32px;background:url(\\\"/images/ico/ico_search_black_18x18.png\\\") center no-repeat;background-size:18px;}}}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst ButtonBox = _styled(\"div\", {\n  target: \"e1nfsorh4\",\n  label: \"ButtonBox\"\n})(true ? {\n  name: \"1mdp0at\",\n  styles: \"button{width:80px;height:32px;border-radius:2px;font-size:14px;}\"\n} : {\n  name: \"1mdp0at\",\n  styles: \"button{width:80px;height:32px;border-radius:2px;font-size:14px;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst AddBtn = _styled(\"button\", {\n  target: \"e1nfsorh3\",\n  label: \"AddBtn\"\n})(true ? {\n  name: \"ejemuo\",\n  styles: \"border:1px solid #177efb;background-color:#177efb;color:#ffffff\"\n} : {\n  name: \"ejemuo\",\n  styles: \"border:1px solid #177efb;background-color:#177efb;color:#ffffff\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst RemoveButton = _styled(\"button\", {\n  target: \"e1nfsorh2\",\n  label: \"RemoveButton\"\n})(true ? {\n  name: \"1dmkda7\",\n  styles: \"border:1px solid #757575;color:#454545;margin-left:7px\"\n} : {\n  name: \"1dmkda7\",\n  styles: \"border:1px solid #757575;color:#454545;margin-left:7px\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst ContactWrap = _styled(\"div\", {\n  target: \"e1nfsorh1\",\n  label: \"ContactWrap\"\n})(true ? {\n  name: \"1erjgm8\",\n  styles: \"padding-top:10px;box-sizing:border-box\"\n} : {\n  name: \"1erjgm8\",\n  styles: \"padding-top:10px;box-sizing:border-box\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst ContactListWrap = _styled(\"div\", {\n  target: \"e1nfsorh0\",\n  label: \"ContactListWrap\"\n})(true ? {\n  name: \"u9vlan\",\n  styles: \"position:relative;height:440px;width:100%;padding:0 20px;box-sizing:border-box;overflow-y:auto;table{width:100%;position:relative;text-align:center;table-layout:fixed;margin:0 auto;&:after{position:absolute;content:\\\"\\\";display:block;width:100%;top:0;border-top:1px solid #454545;z-index:1;}tr{border-bottom:1px solid #eee;}thead th{height:35px;font-size:14px;font-weight:500;color:#252525;background-color:#fafafa;border-left:1px solid #dbdbdb;box-sizing:border-box;&:first-of-type{border-left:none;}input[type=\\\"checkbox\\\"]{display:none;+label{display:inline-block;width:14px;height:14px;padding:0;margin:0;border:1px solid #dbdbdb;border-radius:5px;overflow:hidden;cursor:pointer;}&:checked+label{background:url(\\\"/images/ico/ico_checked.png\\\") center no-repeat;}}}tbody td{position:relative;font-family:\\\"dotum\\\",tahoma,\\\"MalgunGothic\\\",\\\"Verdana\\\",\\\"Arial\\\",\\\"Helvetica\\\",sans-serif;font-size:12px;color:#454545;letter-spacing:0;height:30px;padding:0px 5px;border-left:1px solid #dbdbdb;box-sizing:border-box;}}\"\n} : {\n  name: \"u9vlan\",\n  styles: \"position:relative;height:440px;width:100%;padding:0 20px;box-sizing:border-box;overflow-y:auto;table{width:100%;position:relative;text-align:center;table-layout:fixed;margin:0 auto;&:after{position:absolute;content:\\\"\\\";display:block;width:100%;top:0;border-top:1px solid #454545;z-index:1;}tr{border-bottom:1px solid #eee;}thead th{height:35px;font-size:14px;font-weight:500;color:#252525;background-color:#fafafa;border-left:1px solid #dbdbdb;box-sizing:border-box;&:first-of-type{border-left:none;}input[type=\\\"checkbox\\\"]{display:none;+label{display:inline-block;width:14px;height:14px;padding:0;margin:0;border:1px solid #dbdbdb;border-radius:5px;overflow:hidden;cursor:pointer;}&:checked+label{background:url(\\\"/images/ico/ico_checked.png\\\") center no-repeat;}}}tbody td{position:relative;font-family:\\\"dotum\\\",tahoma,\\\"MalgunGothic\\\",\\\"Verdana\\\",\\\"Arial\\\",\\\"Helvetica\\\",sans-serif;font-size:12px;color:#454545;letter-spacing:0;height:30px;padding:0px 5px;border-left:1px solid #dbdbdb;box-sizing:border-box;}}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n}); //#endregion\n\n\nconst ContactPopupContainer = ({\n  isShow = false,\n  onClose = () => {}\n}) => {\n  const {\n    0: pagingData,\n    1: setPagingData\n  } = useState({\n    page: 0,\n    total: 0\n  });\n  const {\n    0: contactList,\n    1: setContactList\n  } = useState([]);\n  const searchRef = useRef();\n  const getContactData = useCallback(async (page = 1, name = \"\") => {\n    const {\n      data: {\n        page: currentPage,\n        total,\n        contacts\n      }\n    } = await axios.get(`/contact/${page}${name ? `?name=${name}` : \"\"}`);\n    setPagingData({\n      page: currentPage,\n      total\n    });\n    setContactList(contacts);\n  }, []);\n  useEffect(() => {\n    getContactData(1);\n  }, []);\n  const onAddClick = useCallback(() => {\n    if (contactList.findIndex(({\n      telId\n    }) => typeof telId === \"undefined\") > -1) {\n      alert(\"현재 추가 진행 중입니다.\");\n      return;\n    }\n\n    setContactList([{\n      favorYn: \"N\",\n      name: \"\",\n      memo: \"\",\n      infos: [{\n        orded: 0\n      }]\n    }, ...contactList]);\n  }, [contactList]);\n  const onSaveClick = useCallback(async contact => {\n    if (!contact.telId) {\n      await axios.post(\"/contact\", contact);\n    } else {\n      await axios.put(\"/contact\", contact);\n    }\n\n    alert(\"저장되었습니다.\");\n    setContactList([]);\n    getContactData(1);\n  }, []);\n  const onCancelClick = useCallback(contact => {\n    if (!contact.telId) {\n      setContactList([...contactList].splice(1));\n    }\n  }, [contactList]);\n  const onDeleteClick = useCallback(async () => {\n    const telIdChecks = document.querySelectorAll(\".contact_tel_id:checked\");\n    const telIds = [];\n    telIdChecks.forEach(telId => {\n      telIds.push(telId.value);\n    });\n    await axios.post(\"/contact/delete\", {\n      telIds\n    });\n    alert(\"삭제되었습니다.\");\n    setContactList([]);\n    getContactData(1);\n  }, []);\n  const onSearchClick = useCallback(() => {\n    const name = searchRef.current.value.trim();\n\n    if (!name) {\n      alert(\"검색하실 이름을 입력해주세요.\");\n      return;\n    }\n\n    getContactData(1, name);\n  }, [searchRef]);\n  const onRefreshClick = useCallback(() => {\n    searchRef.current.value = \"\";\n    getContactData(1);\n  }, [searchRef]);\n  const allCheckEvent = useCallback(e => {\n    const telIdChecks = document.querySelectorAll(\".contact_tel_id\");\n    telIdChecks.forEach(telIdCheck => telIdCheck.checked = e.currentTarget.checked);\n  }, []);\n  const movePageClick = useCallback(page => {\n    const name = searchRef.current.value.trim();\n    getContactData(page, name ? name : null);\n  }, [searchRef]);\n  const ContactItemList = useMemo(() => contactList.map(contact => /*#__PURE__*/_createElement(ContactItem, _objectSpread(_objectSpread({}, contact), {}, {\n    key: `contact-item-key-${contact.telId}`,\n    onSaveClick: onSaveClick,\n    onCancelClick: onCancelClick\n  }))), [contactList]);\n  return isShow && /*#__PURE__*/_jsx(ContactPopWrap, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(PopTop, {\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          children: \"\\uC5F0\\uB77D\\uCC98 \\uAD00\\uB9AC\"\n        }), /*#__PURE__*/_jsx(\"button\", {\n          type: \"button\",\n          onClick: onClose\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsxs(SearchWrap, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsxs(InputWrap, {\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                ref: searchRef,\n                placeholder: \"이름 검색\"\n              }), /*#__PURE__*/_jsx(\"button\", {\n                type: \"button\",\n                onClick: onSearchClick\n              })]\n            }), /*#__PURE__*/_jsx(RefreshButton, {\n              onClick: onRefreshClick\n            })]\n          }), /*#__PURE__*/_jsxs(ButtonBox, {\n            children: [/*#__PURE__*/_jsx(AddBtn, {\n              type: \"button\",\n              onClick: onAddClick,\n              children: \"\\uCD94\\uAC00\"\n            }), /*#__PURE__*/_jsx(RemoveButton, {\n              type: \"button\",\n              onClick: onDeleteClick,\n              children: \"\\uC81C\\uAC70\"\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(ContactWrap, {\n        children: [/*#__PURE__*/_jsx(ContactListWrap, {\n          children: /*#__PURE__*/_jsxs(\"table\", {\n            children: [/*#__PURE__*/_jsxs(\"colgroup\", {\n              children: [/*#__PURE__*/_jsx(\"col\", {\n                width: \"30px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"30px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"120px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"120px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"120px\"\n              }), /*#__PURE__*/_jsx(\"col\", {\n                width: \"*\"\n              })]\n            }), /*#__PURE__*/_jsx(\"thead\", {\n              children: /*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsxs(\"th\", {\n                  children: [/*#__PURE__*/_jsx(\"input\", {\n                    type: \"checkbox\",\n                    id: \"checkAll\",\n                    onClick: allCheckEvent\n                  }), /*#__PURE__*/_jsx(\"label\", {\n                    htmlFor: \"checkAll\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"th\", {}), /*#__PURE__*/_jsx(\"th\", {\n                  children: \"\\uC774\\uB984\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  children: \"\\uC5F0\\uB77D\\uCC98\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  children: \"\\uD329\\uC2A4\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  children: \"\\uC774\\uBA54\\uC77C\"\n                })]\n              })\n            }), /*#__PURE__*/_jsx(\"tbody\", {\n              children: ContactItemList\n            })]\n          })\n        }), /*#__PURE__*/_jsx(ContactPaging, {\n          page: pagingData.page,\n          total: pagingData.total,\n          onClick: movePageClick\n        })]\n      })]\n    })\n  });\n};\n\nexport default ContactPopupContainer;","map":null,"metadata":{},"sourceType":"module"}