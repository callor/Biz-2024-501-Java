{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as dateFns from \"date-fns\";\nexport class DateUtil {\n  static setDate(date, option) {\n    return dateFns.set(date, option);\n  }\n\n  static format(date, format) {\n    if (date instanceof Date) {\n      return dateFns.format(date, format);\n    } else {\n      return dateFns.format(new Date(date), format);\n    }\n  }\n\n  static addDay(date, num) {\n    return dateFns.addDays(date, num);\n  }\n\n  static addMonth(date, num) {\n    return dateFns.addMonths(date, num);\n  }\n  /**\n   * @example\n   * DateUtil.getDayAndTime(new Date(2020,11,1)) // ['2020-12-01', '00:00']\n   */\n\n\n  static getDayAndTime(date) {\n    return [this.format(date, \"yyyy-MM-dd\"), this.format(date, \"HH:mm\")];\n  }\n  /**\n   * @example\n   * DateUtil.formatLocale(new Date(2020,11,1)) // 2020.12.01 AM 00:00\n   */\n\n\n  static formatLocale(date) {\n    return dateFns.format(date, \"yyyy.MM.dd a hh:mm\");\n  }\n  /**\n   * @example\n   * DateUtil.isInvalidDate(new Date(2020,11,1)) // false\n   * DateUtil.isInvalidDate(new Date(undefined)) // true\n   */\n\n\n  static isInvalidDate(date) {\n    return !date || isNaN(Number(date));\n  }\n\n  static getWeekOfMonth(date) {\n    return dateFns.getWeekOfMonth(date);\n  }\n\n  static getLastMonthDay(date) {\n    return dateFns.endOfMonth(date);\n  }\n\n  static getStartCalendarDay(date) {\n    return dateFns.startOfWeek(dateFns.startOfMonth(date));\n  }\n\n  static getStartWeekDay(date) {\n    return dateFns.startOfWeek(date);\n  }\n\n  static getLastWeekDay(date) {\n    return dateFns.lastDayOfWeek(date);\n  }\n  /**\n   *\n   * @param date1 기준날짜\n   * @param date2 비교할날짜\n   * @example\n   * DateUtil.diffWeek(new Date(2020,10,30),new Date(2020,10,1))   ---> 4\n   */\n\n\n  static diffWeek(date1, date2) {\n    return dateFns.differenceInCalendarWeeks(date1, date2);\n  }\n\n  static getDayType(day) {\n    return this.days[day];\n  }\n\n  static weekToLocale(day, locale = \"ko\") {\n    return this.localeWeek[locale][day - 1];\n  }\n\n  static dayToLocale(day, locale = \"ko\") {\n    return this.localeDay[locale][day];\n  }\n  /**\n   *\n   * @param date1 기준 날짜\n   * @param date2 비교할 날짜\n   * @example\n   * DateUtil.diffDay(new Date(2020,1,5), new Date(2020,1,3))  ---->  2\n   */\n\n\n  static diffDay(date1, date2) {\n    return dateFns.differenceInCalendarDays(date1, date2);\n  }\n\n  static getCalendarStartDay(date) {\n    return dateFns.startOfWeek(dateFns.startOfMonth(date));\n  }\n\n  static getCalendarLastDay(date) {\n    return dateFns.lastDayOfWeek(dateFns.endOfMonth(date));\n  } // 달력\n\n\n  static getCalendar(date) {\n    // \b\b결과 담을 리스트\n    const weekList = []; // 반복 돌릴 마지막 지점\n\n    const monthLastDay = this.addDay(this.getCalendarLastDay(date), 1); // 일자 담을 리스트\n\n    let dayList = []; // \b반복 돌릴 시작 지점\n\n    let day = this.getCalendarStartDay(date); // 같아질때까지 돌린다.\n\n    dateFns.isSameDay(day, monthLastDay);\n\n    while (!dateFns.isSameDay(day, monthLastDay)) {\n      dayList.push({\n        day: this.format(day, \"dd\"),\n        isEmpty: !dateFns.isSameMonth(day, date),\n        value: day,\n        ymd: this.format(day, \"yyyyMMdd\")\n      }); // 7일 마다 배열을 넣고 새로 초기화\n\n      if (dayList.length === 7) {\n        weekList.push(dayList);\n        dayList = [];\n      }\n\n      day = this.addDay(day, 1);\n    }\n\n    return weekList;\n  }\n\n}\n\n_defineProperty(DateUtil, \"days\", [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]);\n\n_defineProperty(DateUtil, \"localeDay\", {\n  ko: [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\", \"일요일\"]\n});\n\n_defineProperty(DateUtil, \"localeWeek\", {\n  ko: [\"첫번째\", \"두번째\", \"세번째\", \"네번째\", \"마지막\", \"마지막\"]\n});","map":null,"metadata":{},"sourceType":"module"}