{"ast":null,"code":"import _classCallCheck from \"/home/emp/front/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/emp/front/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar ColorUtil = /*#__PURE__*/function () {\n  function ColorUtil() {\n    _classCallCheck(this, ColorUtil);\n  }\n\n  _createClass(ColorUtil, null, [{\n    key: \"randomColor\",\n    value: function randomColor() {\n      var letters = \"0123456789ABCDEF\";\n      var color = \"#\";\n\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n\n      return color;\n    }\n  }, {\n    key: \"isLight\",\n    value: function isLight(hex) {\n      return this.getBrightness(hex) > 128;\n    }\n  }, {\n    key: \"isDark\",\n    value: function isDark(hex) {\n      return this.getBrightness(hex) <= 128;\n    }\n  }, {\n    key: \"getBrightness\",\n    value: function getBrightness(hex) {\n      if (hex.includes(\"#\")) {\n        hex = hex.substring(1);\n      }\n\n      if (hex.length === 3) {\n        hex = hex.replace(/(.)/g, \"$1$1\");\n      }\n\n      var rgb = parseInt(hex, 16);\n      var red = rgb >> 16 & 0xff;\n      var green = rgb >> 8 & 0xff;\n      var blue = rgb >> 0 & 0xff;\n      var brightness = (red * 299 + green * 587 + blue * 114) / 1000;\n      return brightness;\n    }\n  }, {\n    key: \"getLuminance\",\n    value: function getLuminance(hex) {\n      if (hex.includes(\"#\")) {\n        hex = hex.substring(1);\n      }\n\n      if (hex.length === 3) {\n        hex = hex.replace(/(.)/g, \"$1$1\");\n      }\n\n      var rgb = parseInt(hex, 16);\n      var red = rgb >> 16 & 0xff;\n      var green = rgb >> 8 & 0xff;\n      var blue = rgb >> 0 & 0xff;\n      var RsRGB = red / 255;\n      var GsRGB = green / 255;\n      var BsRGB = blue / 255;\n\n      if (RsRGB <= 0.03928) {\n        red = RsRGB / 12.92;\n      } else {\n        red = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (GsRGB <= 0.03928) {\n        green = GsRGB / 12.92;\n      } else {\n        green = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (BsRGB <= 0.03928) {\n        blue = BsRGB / 12.92;\n      } else {\n        blue = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n    }\n  }]);\n\n  return ColorUtil;\n}();\n\nexport { ColorUtil as default };","map":null,"metadata":{},"sourceType":"module"}