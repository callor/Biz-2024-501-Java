{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport { axios, serverAxios } from \"@utils/network.util\";\nimport MainLayout from \"@components/layout/main\";\nimport CompactColorPicker from \"@components/common/colorpicker/CompactColorPicker\";\nimport ButtonWrap from \"@components/common/button/ButtonWrap\";\nimport { BlueButton } from \"@components/common/button\";\nimport { FormButtonBasic } from \"@components/mypage/form\";\nimport { useForm } from \"react-hook-form/dist/index.ie11\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useWindowSize from \"@hooks/useWindowSize\";\nimport { useRouter } from \"next/router\"; //#region styled\n\nconst Wrap = _styled(\"div\", {\n  target: \"ekk7qe914\",\n  label: \"Wrap\"\n})(true ? {\n  name: \"1gn3kn5\",\n  styles: \"display:flex;width:100%;height:100%\"\n} : {\n  name: \"1gn3kn5\",\n  styles: \"display:flex;width:100%;height:100%\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst LeftWrap = _styled(\"div\", {\n  target: \"ekk7qe913\",\n  label: \"LeftWrap\"\n})(true ? {\n  name: \"14hag4i\",\n  styles: \"width:30px;flex:0 0 30px;height:100%;border-right:1px solid #dbdbdb;box-sizing:border-box\"\n} : {\n  name: \"14hag4i\",\n  styles: \"width:30px;flex:0 0 30px;height:100%;border-right:1px solid #dbdbdb;box-sizing:border-box\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst MainWrap = _styled(\"div\", {\n  target: \"ekk7qe912\",\n  label: \"MainWrap\"\n})(true ? {\n  name: \"1ffyzdl\",\n  styles: \"flex:1;width:100%;height:100%;box-sizing:border-box\"\n} : {\n  name: \"1ffyzdl\",\n  styles: \"flex:1;width:100%;height:100%;box-sizing:border-box\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst TableWrap = _styled(\"div\", {\n  target: \"ekk7qe911\",\n  label: \"TableWrap\"\n})(true ? {\n  name: \"1lu1tkp\",\n  styles: \"height:100%;padding:20px 20px 10px;box-sizing:border-box;width:540px;float:left\"\n} : {\n  name: \"1lu1tkp\",\n  styles: \"height:100%;padding:20px 20px 10px;box-sizing:border-box;width:540px;float:left\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst CalendarListWrap = _styled(\"div\", {\n  target: \"ekk7qe910\",\n  label: \"CalendarListWrap\"\n})(true ? {\n  name: \"1bl4be0\",\n  styles: \"width:220px;height:100%;border:1px solid #dbdbdb;border-top:1px solid #454545;border-bottom:none;box-sizing:border-box;float:left\"\n} : {\n  name: \"1bl4be0\",\n  styles: \"width:220px;height:100%;border:1px solid #dbdbdb;border-top:1px solid #454545;border-bottom:none;box-sizing:border-box;float:left\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst CalendarSettingWrap = /*#__PURE__*/_styled(CalendarListWrap, {\n  target: \"ekk7qe99\",\n  label: \"CalendarSettingWrap\"\n})(\"width:270px;margin-left:10px;\", ButtonWrap, \"{margin-top:10px;button{width:60px;height:24px;line-height:22px;border-radius:2px;font-size:12px;+button{margin-left:7px;}}}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst TableTop = _styled(\"div\", {\n  target: \"ekk7qe98\",\n  label: \"TableTop\"\n})(true ? {\n  name: \"1w0uarj\",\n  styles: \"height:42px;background:#fafafa;border-bottom:1px solid #eeeeee;box-sizing:border-box;>p{line-height:42px;font-size:14px;font-weight:500;color:#252525;text-align:center;}\"\n} : {\n  name: \"1w0uarj\",\n  styles: \"height:42px;background:#fafafa;border-bottom:1px solid #eeeeee;box-sizing:border-box;>p{line-height:42px;font-size:14px;font-weight:500;color:#252525;text-align:center;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Table = _styled(\"div\", {\n  target: \"ekk7qe97\",\n  label: \"Table\"\n})(true ? {\n  name: \"38r5wu\",\n  styles: \"height:calc(100% - 42px);border-bottom:1px solid #dbdbdb;box-sizing:border-box;overflow-y:auto;>ul>li{height:36px;font-size:14px;line-height:35px;border-bottom:1px solid #dbdbdb;padding-left:7px;box-sizing:border-box;cursor:pointer;}\"\n} : {\n  name: \"38r5wu\",\n  styles: \"height:calc(100% - 42px);border-bottom:1px solid #dbdbdb;box-sizing:border-box;overflow-y:auto;>ul>li{height:36px;font-size:14px;line-height:35px;border-bottom:1px solid #dbdbdb;padding-left:7px;box-sizing:border-box;cursor:pointer;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst InputWrap = _styled(\"div\", {\n  target: \"ekk7qe96\",\n  label: \"InputWrap\"\n})(true ? {\n  name: \"19vn32n\",\n  styles: \"border-bottom:1px solid #dbdbdb;padding:10px 10px 12px;position:relative;>input[type=\\\"text\\\"]{width:100%;height:36px;}\"\n} : {\n  name: \"19vn32n\",\n  styles: \"border-bottom:1px solid #dbdbdb;padding:10px 10px 12px;position:relative;>input[type=\\\"text\\\"]{width:100%;height:36px;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst CheckBox = _styled(\"div\", {\n  target: \"ekk7qe95\",\n  label: \"CheckBox\"\n})(true ? {\n  name: \"1f43s4s\",\n  styles: \"display:inline-block;+div{margin-left:40px;}input[type=\\\"checkbox\\\"]{display:none;+label{display:inline-block;font-size:14px;color:#454545;line-height:24px;padding-left:34px;background:url(\\\"/images/btn/btn_checkbox_no_24x24.png\\\") left center no-repeat;}&:checked+label{background:url(\\\"/images/btn/btn_checkbox_yes_24x24.png\\\") left center no-repeat;}}\"\n} : {\n  name: \"1f43s4s\",\n  styles: \"display:inline-block;+div{margin-left:40px;}input[type=\\\"checkbox\\\"]{display:none;+label{display:inline-block;font-size:14px;color:#454545;line-height:24px;padding-left:34px;background:url(\\\"/images/btn/btn_checkbox_no_24x24.png\\\") left center no-repeat;}&:checked+label{background:url(\\\"/images/btn/btn_checkbox_yes_24x24.png\\\") left center no-repeat;}}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst ColorPicker = /*#__PURE__*/_styled(CompactColorPicker, {\n  target: \"ekk7qe94\",\n  label: \"ColorPicker\"\n})(true ? {\n  name: \"1nbdcyf\",\n  styles: \"position:relative;width:118px;height:36px;padding-right:32px;box-sizing:border-box;background-position:right 10px center;background-repeat:no-repeat;background-image:url(\\\"/images/ico/ico_color_text.png\\\")\"\n} : {\n  name: \"1nbdcyf\",\n  styles: \"position:relative;width:118px;height:36px;padding-right:32px;box-sizing:border-box;background-position:right 10px center;background-repeat:no-repeat;background-image:url(\\\"/images/ico/ico_color_text.png\\\")\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst BgColorPicker = /*#__PURE__*/_styled(ColorPicker, {\n  target: \"ekk7qe93\",\n  label: \"BgColorPicker\"\n})(true ? {\n  name: \"4w0ou8\",\n  styles: \"margin-left:10px;background-image:url(\\\"/images/ico/ico_color_bg.png\\\");background-position:right 5px center\"\n} : {\n  name: \"4w0ou8\",\n  styles: \"margin-left:10px;background-image:url(\\\"/images/ico/ico_color_bg.png\\\");background-position:right 5px center\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Banner = _styled(\"div\", {\n  target: \"ekk7qe92\",\n  label: \"Banner\"\n})(\"float:left;width:calc(100% - 560px);height:100%;margin-left:20px;background-size:contain;background-position:left center;background-repeat:no-repeat;background-color:#e8eff5;background-image:url(\\\"\", props => props.imageUrl, \"\\\");cursor:pointer;\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst PreviewEvent = _styled(\"p\", {\n  target: \"ekk7qe91\",\n  label: \"PreviewEvent\"\n})(\"width:100%;line-height:15px;font-size:13px;padding:3px 0 3px 10px;box-sizing:border-box;border-radius:8px;color:\", props => props.color, \";background-color:\", props => props.bgColor, \";\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst CalendarItem = _styled(\"li\", {\n  target: \"ekk7qe90\",\n  label: \"CalendarItem\"\n})(\"background-color:\", props => props.isOn ? \"#6485ae\" : \"#f5f6f8\", \";color:\", props => props.isOn ? \"#fff\" : \"#888e9c\", \";\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")); //#endregion\n\n\nconst CalendarSettingPage = ({\n  calendars\n}) => {\n  const windowSize = useWindowSize();\n  const router = useRouter();\n  const bannerImage = useMemo(() => windowSize.width <= 1280 ? \"/images/sub/setting_banner_1280.jpg\" : \"/images/sub/setting_banner.jpg\", [windowSize]);\n  const {\n    register,\n    reset,\n    setValue,\n    getValues\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      color: \"\",\n      bgColor: \"\",\n      useYn: \"\"\n    }\n  });\n  const {\n    0: calendarColor,\n    1: setCalendarColor\n  } = useState();\n  const {\n    0: calendarId,\n    1: setCalendarId\n  } = useState();\n  const getCalendarData = useCallback(async calendarId => {\n    setCalendarId(calendarId);\n\n    if (calendarId) {\n      const {\n        data: calendar\n      } = await axios.get(`/diary/calendar/${calendarId}`);\n      setCalendarColor({\n        color: calendar.color,\n        bgColor: calendar.bgColor\n      });\n      setValue(\"color\", calendar.color);\n      setValue(\"bgColor\", calendar.bgColor);\n      setValue(\"name\", calendar.name);\n      setValue(\"useYn\", calendar.useYn === \"Y\" ? \"Y\" : \"\");\n    } else {\n      setCalendarColor(undefined);\n      reset();\n    }\n  }, []);\n  useEffect(() => {\n    var _calendars$;\n\n    getCalendarData((_calendars$ = calendars[0]) === null || _calendars$ === void 0 ? void 0 : _calendars$.calendarId);\n  }, []);\n  const onCalendarSelectClick = useCallback(e => {\n    const {\n      calendarId\n    } = e.currentTarget.dataset;\n    getCalendarData(calendarId);\n  }, []);\n  const onColorChange = useCallback(color => {\n    setValue(\"color\", color.hex);\n    setCalendarColor({\n      color: color.hex,\n      bgColor: calendarColor.bgColor\n    });\n  }, [calendarColor]);\n  const onBgColorChange = useCallback(color => {\n    setValue(\"bgColor\", color.hex);\n    setCalendarColor({\n      color: calendarColor.color,\n      bgColor: color.hex\n    });\n  }, [calendarColor]);\n  const CalendarList = useMemo(() => calendars.map(({\n    calendarId: _calendarId,\n    name\n  }) => /*#__PURE__*/_jsx(CalendarItem, {\n    \"data-calendar-id\": _calendarId,\n    onClick: onCalendarSelectClick,\n    isOn: calendarId === _calendarId,\n    children: name\n  }, `calendar-list-${_calendarId}`)), [calendarId]);\n  const onBlurColorChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCalendarColor(_objectSpread(_objectSpread({}, calendarColor), {}, {\n      [name]: value\n    }));\n  }, [calendarColor]);\n  const onDeleteCalendarClick = useCallback(async () => {\n    if (calendarId && confirm(\"해당 그룹을 삭제하시겠습니까 ?\")) {\n      await axios.delete(`/diary/calendar/${calendarId}`);\n      alert(\"삭제 되었습니다.\");\n      router.reload();\n    }\n  }, [calendarId]);\n  const onModifyCalendarClick = useCallback(async () => {\n    if (calendarId) {\n      const {\n        name,\n        useYn,\n        bgColor,\n        color\n      } = getValues();\n\n      if (!name) {\n        alert(\"그룹명을 설정하셔야 합니다.\");\n        return;\n      }\n\n      if (!(color && bgColor)) {\n        alert(\"사용하실 색상을 선택 하셔야합니다.\");\n        return;\n      }\n\n      const param = {\n        calendarId,\n        name,\n        color,\n        bgColor,\n        useYn: useYn ? \"Y\" : \"N\"\n      };\n      await axios.put(`/diary/calendar`, param);\n      alert(\"수정 되었습니다.\");\n      router.reload();\n    }\n  }, [calendarId]);\n  const openConinfo = useCallback(() => {\n    window.open(\"https://coninfo.co.kr/\", \"_blank\");\n  }, []);\n  return /*#__PURE__*/_jsx(MainLayout, {\n    title: \"그룹 설정\",\n    children: /*#__PURE__*/_jsxs(Wrap, {\n      children: [/*#__PURE__*/_jsx(LeftWrap, {}), /*#__PURE__*/_jsxs(MainWrap, {\n        children: [/*#__PURE__*/_jsxs(TableWrap, {\n          children: [/*#__PURE__*/_jsxs(CalendarListWrap, {\n            children: [/*#__PURE__*/_jsx(TableTop, {\n              children: /*#__PURE__*/_jsx(\"p\", {\n                children: \"\\uADF8\\uB8F9\\uBAA9\\uB85D\"\n              })\n            }), /*#__PURE__*/_jsx(Table, {\n              children: /*#__PURE__*/_jsx(\"ul\", {\n                children: CalendarList\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(CalendarSettingWrap, {\n            children: [/*#__PURE__*/_jsx(TableTop, {\n              children: /*#__PURE__*/_jsx(\"p\", {\n                children: \"\\uADF8\\uB8F9\\uC124\\uC815\"\n              })\n            }), /*#__PURE__*/_jsx(InputWrap, {\n              children: /*#__PURE__*/_jsxs(CheckBox, {\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  type: \"checkbox\",\n                  id: \"useYn\",\n                  name: \"useYn\",\n                  value: \"Y\",\n                  ref: register,\n                  readOnly: calendarId === undefined\n                }), /*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"useYn\",\n                  children: \"\\uC0AC\\uC6A9\"\n                })]\n              })\n            }), /*#__PURE__*/_jsx(TableTop, {\n              children: /*#__PURE__*/_jsx(\"p\", {\n                children: \"\\uADF8\\uB8F9\\uBA85\\uC124\\uC815\"\n              })\n            }), /*#__PURE__*/_jsx(InputWrap, {\n              children: /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                ref: register,\n                name: \"name\"\n              })\n            }), /*#__PURE__*/_jsx(TableTop, {\n              children: /*#__PURE__*/_jsx(\"p\", {\n                children: \"\\uC0C9\\uC0C1\\uC124\\uC815\"\n              })\n            }), /*#__PURE__*/_jsxs(InputWrap, {\n              children: [/*#__PURE__*/_jsx(ColorPicker, {\n                ref: register,\n                name: \"color\",\n                color: calendarColor === null || calendarColor === void 0 ? void 0 : calendarColor.color,\n                readOnly: calendarId === undefined,\n                onColorChange: onColorChange,\n                onBlur: onBlurColorChange\n              }), /*#__PURE__*/_jsx(BgColorPicker, {\n                ref: register,\n                name: \"bgColor\",\n                color: calendarColor === null || calendarColor === void 0 ? void 0 : calendarColor.bgColor,\n                readOnly: calendarId === undefined,\n                onColorChange: onBgColorChange,\n                onBlur: onBlurColorChange\n              })]\n            }), /*#__PURE__*/_jsx(TableTop, {\n              children: /*#__PURE__*/_jsx(\"p\", {\n                children: \"\\uC0C9\\uC0C1 \\uBBF8\\uB9AC\\uBCF4\\uAE30\"\n              })\n            }), /*#__PURE__*/_jsx(InputWrap, {\n              children: calendarColor && /*#__PURE__*/_jsx(PreviewEvent, {\n                color: calendarColor.color,\n                bgColor: calendarColor.bgColor,\n                children: \"- \\uD604\\uC7AC \\uADF8\\uB8F9\\uC758 \\uC124\\uC815\\uB41C \\uC0C9\\uC0C1 \\uC785\\uB2C8\\uB2E4.\"\n              })\n            }), calendarId && /*#__PURE__*/_jsxs(ButtonWrap, {\n              children: [/*#__PURE__*/_jsx(BlueButton, {\n                onClick: onModifyCalendarClick,\n                children: \"\\uC800\\uC7A5\"\n              }), /*#__PURE__*/_jsx(FormButtonBasic, {\n                onClick: onDeleteCalendarClick,\n                children: \"\\uC0AD\\uC81C\"\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(Banner, {\n          imageUrl: bannerImage,\n          onClick: openConinfo\n        })]\n      })]\n    })\n  });\n};\n\nexport const getServerSideProps = async ctx => {\n  const {\n    data: calendars\n  } = await serverAxios(ctx).get(\"/diary/calendar/all\");\n  return {\n    props: {\n      calendars\n    }\n  };\n};\nexport default CalendarSettingPage;","map":null,"metadata":{},"sourceType":"module"}