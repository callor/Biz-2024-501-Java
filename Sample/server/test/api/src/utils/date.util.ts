import * as dateFns from 'date-fns';

export default class DateUtil {
  static format(date: number | Date, format: string): string {
    return dateFns.format(date, format);
  }

  static ymdToDate(ymd: string) {
    return dateFns.parseISO(ymd.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3'));
  }

  static getLastDayOfMonthByString(ymd: string) {
    const date = this.ymdToDate(ymd.replace(/-/g, ''));
    return this.getLastDayOfMonth(date);
  }

  static getLastDayOfMonth(date: Date) {
    return dateFns.lastDayOfMonth(date);
  }

  static getFirstDayOfMonth(date: Date) {
    return dateFns.setDay(date, 1);
  }

  static addDay(date: Date, num: number) {
    return dateFns.addDays(date, num);
  }

  static addMonth(date: Date, num: number) {
    return dateFns.addMonths(date, num);
  }

  static diffDay(baseDate: Date, compareDate: Date) {
    return dateFns.differenceInDays(baseDate, compareDate);
  }

  static diffMonth(baseDate: Date, compareDate: Date) {
    return dateFns.differenceInMonths(baseDate, compareDate);
  }

  static isSameDay(baseDate: Date, compareDate: Date) {
    return dateFns.isSameDay(baseDate, compareDate);
  }

  static isSameWeek(baseDate: Date, compareDate: Date) {
    return dateFns.isSameWeek(baseDate, compareDate);
  }

  static getWeekOfMonth(date: Date) {
    return dateFns.getWeekOfMonth(date);
  }

  static setDayOfWeek(date: Date, type: 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN') {
    const weekStartsOn = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].indexOf(type) as 0 | 1 | 2 | 3 | 4 | 5 | 6;
    return dateFns.startOfWeek(date, { weekStartsOn });
  }

  static getCalendarStartDay(date: Date) {
    return dateFns.startOfWeek(dateFns.startOfMonth(date));
  }

  static getCalendarLastDay(date: Date) {
    return dateFns.lastDayOfWeek(dateFns.endOfMonth(date));
  }
}

//#region
//===========================================================================
// 윤년을 판단하는 함수
function isLeapYear(year) {
  return year % 400 == 0 || (year % 4 == 0 && year % 100 != 0);
}
// 음력 데이터 (평달 - 작은달 :1,  큰달:2 )
// (윤달이 있는 달 - 평달이 작고 윤달도 작으면 :3 , 평달이 작고 윤달이 크면 : 4)
// (윤달이 있는 달 - 평달이 크고 윤달이 작으면 :5,  평달과 윤달이 모두 크면 : 6)
const lunarMonthTable = [
  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2],
  [2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 2, 1],
  [1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2] /* 1801 */,
  [1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1],
  [2, 3, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 1, 3, 2, 1, 2, 2, 2, 1],
  [2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1],
  [2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [1, 2, 2, 1, 5, 2, 1, 2, 1, 1, 2, 1],
  [2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2],
  [1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2],
  [1, 1, 5, 2, 1, 2, 2, 1, 2, 2, 1, 2] /* 1811 */,
  [1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1],
  [2, 5, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2],
  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 5, 1, 2, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1],
  [2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2],
  [1, 2, 1, 5, 2, 2, 1, 2, 2, 1, 2, 1],
  [1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2] /* 1821 */,
  [2, 1, 5, 1, 1, 2, 1, 2, 2, 1, 2, 2],
  [2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 4, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 1, 2, 3, 2, 1, 2, 2, 1, 2, 2, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2] /* 1831 */,
  [1, 2, 1, 2, 1, 1, 2, 1, 5, 2, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
  [1, 2, 1, 5, 1, 2, 2, 1, 2, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 4, 1, 1, 2, 1, 2, 1, 2, 2, 1] /* 1841 */,
  [2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1],
  [2, 2, 2, 1, 2, 1, 4, 1, 2, 1, 2, 1],
  [2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 5, 2, 1, 2, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 3, 2, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 1, 2, 3, 2, 1, 2, 2] /* 1851 */,
  [2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2],
  [1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
  [1, 2, 1, 1, 5, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [2, 1, 6, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2] /* 1861 */,
  [2, 1, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2],
  [1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 4, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
  [1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2, 1],
  [2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 2, 2, 1, 2, 1, 2, 1, 1, 5, 2, 1],
  [2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2] /* 1871 */,
  [1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
  [1, 1, 2, 1, 2, 4, 2, 1, 2, 2, 1, 2],
  [1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
  [2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1, 2],
  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 2, 4, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2],
  [1, 2, 1, 2, 1, 2, 5, 2, 2, 1, 2, 1] /* 1881 */,
  [1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
  [2, 1, 1, 2, 3, 2, 1, 2, 2, 1, 2, 2],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 2, 1, 5, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2] /* 1891 */,
  [1, 1, 2, 1, 1, 5, 2, 2, 1, 2, 2, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 5, 1, 2, 1, 2, 1, 2, 1],
  [2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 5, 2, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1] /* 1901 */,
  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1],
  [2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],
  [1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
  [1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2] /* 1911 */,
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
  [2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 2, 1, 1, 2, 1, 5, 2, 1, 2, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2] /* 1921 */,
  [2, 1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
  [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
  [2, 1, 2, 5, 2, 1, 2, 2, 1, 2, 1, 2],
  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 5, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
  [1, 2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1],
  [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1] /* 1931 */,
  [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
  [1, 2, 2, 1, 6, 1, 2, 1, 2, 1, 1, 2],
  [1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 4, 1, 1, 2, 2, 1, 2, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
  [2, 2, 1, 1, 2, 1, 4, 1, 2, 2, 1, 2],
  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1] /* 1941 */,
  [2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
  [2, 5, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 3, 2, 1, 2, 1, 2],
  [1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2] /* 1951 */,
  [1, 2, 1, 2, 4, 1, 2, 2, 1, 2, 1, 2],
  [1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
  [2, 1, 4, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2],
  [1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2] /* 1961 */,
  [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],
  [1, 2, 5, 2, 1, 1, 2, 1, 1, 2, 2, 1],
  [2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 2, 1, 5, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
  [1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1, 2] /* 1971 */,
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 2, 1, 5, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1],
  [2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 6, 1, 2, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2] /* 1981 */,
  [2, 1, 2, 3, 2, 1, 1, 2, 1, 2, 2, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [2, 1, 2, 2, 1, 1, 2, 1, 1, 5, 2, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
  [2, 1, 2, 1, 2, 5, 2, 2, 1, 2, 1, 2],
  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2] /* 1991 */,
  [1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [1, 2, 5, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 1, 2, 5, 2, 1, 1, 2],
  [1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1],
  [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1],
  [2, 2, 1, 5, 2, 1, 1, 2, 1, 2, 1, 2] /* 2001 */,
  [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2],
  [1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 1, 5, 2, 2, 1, 2, 2],
  [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
  [2, 2, 1, 1, 5, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1] /* 2011 */,
  [2, 1, 2, 5, 2, 2, 1, 1, 2, 1, 2, 1],
  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 2, 1, 2, 1, 4, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2] /* 여기 변경 */,
  [2, 1, 2, 5, 2, 1, 1, 2, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] /* 2021 */,
  [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
  [1, 5, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1],
  [2, 2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1],
  [2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2],
  [1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1] /* 2031 */,
  [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 5, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 4, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1],
  [2, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 1],
  [2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2] /* 2041 */,
  [1, 5, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
  [2, 1, 2, 1, 1, 2, 3, 2, 1, 2, 2, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
  [2, 1, 2, 2, 4, 1, 2, 1, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1],
  [2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],
  [1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2] /* 2051 */,
  [1, 2, 1, 1, 2, 1, 1, 5, 2, 2, 2, 2],
  [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
  [1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
  [1, 2, 2, 1, 2, 4, 1, 1, 2, 1, 2, 1],
  [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
  [1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1],
  [2, 1, 2, 4, 2, 1, 2, 1, 2, 2, 1, 1],
  [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1],
  [2, 2, 3, 2, 1, 1, 2, 1, 2, 2, 2, 1] /* 2061 */,
  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1],
  [2, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2],
  [1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2],
  [1, 2, 1, 5, 1, 2, 1, 2, 2, 2, 1, 2],
  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
  [2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2] /* 2071 */,
  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
  [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
  [2, 1, 2, 2, 1, 5, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1],
  [2, 1, 2, 3, 2, 1, 2, 2, 2, 1, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [2, 1, 5, 2, 1, 1, 2, 1, 2, 1, 2, 2],
  [1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2] /* 2081 */,
  [1, 2, 2, 2, 1, 2, 3, 2, 1, 1, 2, 2],
  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],
  [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
  [1, 2, 1, 1, 6, 1, 2, 2, 1, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
  [1, 2, 1, 5, 1, 2, 1, 1, 2, 2, 2, 1],
  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1],
  [2, 2, 2, 1, 2, 1, 1, 5, 1, 2, 2, 1],
  [2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1] /* 2091 */,
  [2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],
  [1, 2, 2, 1, 2, 4, 2, 1, 2, 1, 2, 1],
  [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
  [2, 1, 2, 3, 2, 1, 1, 2, 2, 2, 1, 2],
  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
  [2, 5, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2],
  [2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1],
  [2, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2, 1],
];
//=======================================================================
// 계산을 빨리하기 위하여 기준 년도를 구한다.
function getBaseDate(year) {
  let solYear, solMonth, solDay;
  let lunYear, lunMonth, lunDay;
  let lunLeapMonth, lunMonthDay;
  const solMonthDay = [31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  if (year < 1800 || year > 2101) {
    throw '1800년부터 2101년까지만 확인 가능합니다.';
  }
  if (year >= 2080) {
    /* 기준일자 양력 2080년 1월 1일 (음력 2079년 12월 10일) */
    solYear = 2080;
    solMonth = 1;
    solDay = 1;
    lunYear = 2079;
    lunMonth = 12;
    lunDay = 10;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 2080 년 2월 28일 */
    lunMonthDay = 30; /* 2079년 12월 */
  } else if (year >= 2060) {
    /* 기준일자 양력 2060년 1월 1일 (음력 2059년 11월 28일) */
    solYear = 2060;
    solMonth = 1;
    solDay = 1;
    lunYear = 2059;
    lunMonth = 11;
    lunDay = 28;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 2060 년 2월 28일 */
    lunMonthDay = 30; /* 2059년 11월 */
  } else if (year >= 2040) {
    /* 기준일자 양력 2040년 1월 1일 (음력 2039년 11월 17일) */
    solYear = 2040;
    solMonth = 1;
    solDay = 1;
    lunYear = 2039;
    lunMonth = 11;
    lunDay = 17;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 2040 년 2월 28일 */
    lunMonthDay = 29; /* 2039년 11월 */
  } else if (year >= 2020) {
    /* 기준일자 양력 2020년 1월 1일 (음력 2019년 12월 7일) */
    solYear = 2020;
    solMonth = 1;
    solDay = 1;
    lunYear = 2019;
    lunMonth = 12;
    lunDay = 7;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 2020 년 2월 28일 */
    lunMonthDay = 30; /* 2019년 12월 */
  } else if (year >= 2000) {
    /* 기준일자 양력 2000년 1월 1일 (음력 1999년 11월 25일) */
    solYear = 2000;
    solMonth = 1;
    solDay = 1;
    lunYear = 1999;
    lunMonth = 11;
    lunDay = 25;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 2000 년 2월 28일 */
    lunMonthDay = 30; /* 1999년 11월 */
  } else if (year >= 1980) {
    /* 기준일자 양력 1980년 1월 1일 (음력 1979년 11월 14일) */
    solYear = 1980;
    solMonth = 1;
    solDay = 1;
    lunYear = 1979;
    lunMonth = 11;
    lunDay = 14;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1980 년 2월 28일 */
    lunMonthDay = 30; /* 1979년 11월 */
  } else if (year >= 1960) {
    /* 기준일자 양력 1960년 1월 1일 (음력 1959년 12월 3일) */
    solYear = 1960;
    solMonth = 1;
    solDay = 1;
    lunYear = 1959;
    lunMonth = 12;
    lunDay = 3;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1960 년 2월 28일 */
    lunMonthDay = 29; /* 1959년 12월 */
  } else if (year >= 1940) {
    /* 기준일자 양력 1940년 1월 1일 (음력 1939년 11월 22일) */
    solYear = 1940;
    solMonth = 1;
    solDay = 1;
    lunYear = 1939;
    lunMonth = 11;
    lunDay = 22;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1940 년 2월 28일 */
    lunMonthDay = 29; /* 1939년 11월 */
  } else if (year >= 1920) {
    /* 기준일자 양력 1920년 1월 1일 (음력 1919년 11월 11일) */
    solYear = 1920;
    solMonth = 1;
    solDay = 1;
    lunYear = 1919;
    lunMonth = 11;
    lunDay = 11;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1920 년 2월 28일 */
    lunMonthDay = 30; /* 1919년 11월 */
  } else if (year >= 1900) {
    /* 기준일자 양력 1900년 1월 1일 (음력 1899년 12월 1일) */
    solYear = 1900;
    solMonth = 1;
    solDay = 1;
    lunYear = 1899;
    lunMonth = 12;
    lunDay = 1;
    lunLeapMonth = 0;
    solMonthDay[1] = 28; /* 1900 년 2월 28일 */
    lunMonthDay = 30; /* 1899년 12월 */
  } else if (year >= 1880) {
    /* 기준일자 양력 1880년 1월 1일 (음력 1879년 11월 20일) */
    solYear = 1880;
    solMonth = 1;
    solDay = 1;
    lunYear = 1879;
    lunMonth = 11;
    lunDay = 20;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1880 년 2월 28일 */
    lunMonthDay = 30; /* 1879년 11월 */
  } else if (year >= 1860) {
    /* 기준일자 양력 1860년 1월 1일 (음력 1859년 12월 9일) */
    solYear = 1860;
    solMonth = 1;
    solDay = 1;
    lunYear = 1859;
    lunMonth = 12;
    lunDay = 9;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1860 년 2월 28일 */
    lunMonthDay = 30; /* 1859년 12월 */
  } else if (year >= 1840) {
    /* 기준일자 양력 1840년 1월 1일 (음력 1839년 11월 27일) */
    solYear = 1840;
    solMonth = 1;
    solDay = 1;
    lunYear = 1839;
    lunMonth = 11;
    lunDay = 27;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1840 년 2월 28일 */
    lunMonthDay = 30; /* 1839년 11월 */
  } else if (year >= 1820) {
    /* 기준일자 양력 1820년 1월 1일 (음력 1819년 11월 16일) */
    solYear = 1820;
    solMonth = 1;
    solDay = 1;
    lunYear = 1819;
    lunMonth = 11;
    lunDay = 16;
    lunLeapMonth = 0;
    solMonthDay[1] = 29; /* 1820 년 2월 28일 */
    lunMonthDay = 30; /* 1819년 11월 */
  } else if (year >= 1800) {
    /* 기준일자 양력 1800년 1월 1일 (음력 1799년 12월 7일) */
    solYear = 1800;
    solMonth = 1;
    solDay = 1;
    lunYear = 1799;
    lunMonth = 12;
    lunDay = 7;
    lunLeapMonth = 0;
    solMonthDay[1] = 28; /* 1800 년 2월 28일 */
    lunMonthDay = 30; /* 1799년 12월 */
  }
  return {
    solYear: solYear,
    solMonth: solMonth,
    solDay: solDay,
    lunYear: lunYear,
    lunMonth: lunMonth,
    lunDay: lunDay,
    solMonthDay: solMonthDay,
    lunLeapMonth: lunLeapMonth,
    lunMonthDay: lunMonthDay,
  };
}
// 양력/음력, 음력/양력 변환
// 인수 : 년,월,일, 타입(1이면 양력을 음력으로 2이면 음력을 양력으로), 음력일 경우 윤달인지(0이면 평달, 1이면 윤달)
function calcLunar(year, month, day, type: number, leapmonth?) {
  const baseDate = getBaseDate(year);
  let solYear = baseDate.solYear;
  let solMonth = baseDate.solMonth;
  let solDay = baseDate.solDay;
  let lunYear = baseDate.lunYear;
  let lunMonth = baseDate.lunMonth;
  let lunDay = baseDate.lunDay;
  const solMonthDay = baseDate.solMonthDay;
  let lunLeapMonth = baseDate.lunLeapMonth;
  let lunMonthDay = baseDate.lunMonthDay;
  while (true) {
    // 기준 년월일을 하루씩 늘려서 입력된 날짜와 같으면 그값을 리턴한다.
    if (type == 1 && year == solYear && month == solMonth && day == solDay) {
      // 날짜가 양력과 일치하면 음력을 리턴
      return {
        solYear: solYear,
        solMonth: solMonth,
        solDay: solDay,
        lunYear: lunYear,
        lunMonth: lunMonth,
        lunDay: lunDay,
        leapMonth: lunLeapMonth == 1, // 윤달 인지를 리턴
      };
    }
    if (type == 2 && year == lunYear && month == lunMonth && day == lunDay && leapmonth == lunLeapMonth) {
      // 날짜가 음력과 일치하면 양력을 리턴
      return {
        solYear: solYear,
        solMonth: solMonth,
        solDay: solDay,
        lunYear: lunYear,
        lunMonth: lunMonth,
        lunDay: lunDay,
        leapMonth: lunLeapMonth == 1, // 윤달 인지를 리턴
      };
    }
    //------------------------------------------------------------------------
    // 양력날짜를 더한다.
    if (solMonth == 12 && solDay == 31) {
      // 12월에 31일이면 년도 증가 1월 1일
      solYear++;
      solMonth = 1;
      solDay = 1;
      /* 윤년이면 2월을 29일로 */
      solMonthDay[1] = isLeapYear(solYear) ? 29 : 28;
    } else if (solMonthDay[solMonth - 1] == solDay) {
      // 일이 마지막 날이면 월증가 일이 1
      solMonth++;
      solDay = 1;
    } else {
      // 아니면 날짜 증가
      solDay++;
    }
    //------------------------------------------------------------------------
    // 음력 데이터 (평달 - 작은달 :1,  큰달:2 )
    // (윤달이 있는 달 - 평달이 작고 윤달도 작으면 : 3 , 평달이 작고 윤달이 크면 : 4)
    // (윤달이 있는 달 - 평달이 크고 윤달이 작으면 : 5,  평달과 윤달이 모두 크면 : 6)
    // 음력 날짜를 더한다.

    // 년도를 계산하기 위하여 인덱스 값 변경 1799년부터 이므로 년도에서 1799를 뺀다.
    let lunIndex = lunYear - 1799;
    if (
      lunMonth == 12 &&
      ((lunarMonthTable[lunIndex][lunMonth - 1] == 1 && lunDay == 29) || // 작은달 말일
        (lunarMonthTable[lunIndex][lunMonth - 1] == 2 && lunDay == 30)) // 큰달 말일
    ) {
      // 12월 말일이면 년도증가 월일은 1일로
      lunYear++;
      lunMonth = 1;
      lunDay = 1;

      // 년도가 변경되었으므로 인덱스값 조정
      lunIndex = lunYear - 1799;
      // 1월의 마지막 날짜가 큰달인지 작은달인지 판단한다.
      if (lunarMonthTable[lunIndex][lunMonth - 1] == 1) {
        lunMonthDay = 29;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 2) {
        lunMonthDay = 30;
      }
    } else if (lunDay == lunMonthDay) {
      // 말일이라면 월과 마지막 날짜를 다시 조정한다.
      if (lunarMonthTable[lunIndex][lunMonth - 1] >= 3 && lunLeapMonth == 0) {
        // 윤달이라면 (배열 값이 3이상)
        lunDay = 1;
        lunLeapMonth = 1; // 윤달
      } else {
        // 평달이라면
        lunMonth++;
        lunDay = 1;
        lunLeapMonth = 0; // 평달
      }
      // 월의 마지막 날짜 계산
      if (lunarMonthTable[lunIndex][lunMonth - 1] == 1) {
        // 평달이면서 작은달은 29일
        lunMonthDay = 29;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 2) {
        // 평달이면서 큰달은 30일
        lunMonthDay = 30;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 3) {
        // 윤달이 있는 달이면 (평달이 작고 윤달도 작으면 : 3)
        lunMonthDay = 29;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 4 && lunLeapMonth == 0) {
        // 윤달이 있는 달이면 (평달이 작고 윤달이 크면 : 4)  -- 평달이라면
        lunMonthDay = 29;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 4 && lunLeapMonth == 1) {
        // 윤달이 있는 달이면 (평달이 작고 윤달이 크면 : 4)  -- 윤달이라면
        lunMonthDay = 30;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 5 && lunLeapMonth == 0) {
        // 윤달이 있는 달이면 (평달이 크고 윤달이 작으면 : 5)  -- 평달이라면
        lunMonthDay = 30;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 5 && lunLeapMonth == 1) {
        // 윤달이 있는 달이면 (평달이 크고 윤달이 작으면 : 5)  -- 윤달이라면
        lunMonthDay = 29;
      } else if (lunarMonthTable[lunIndex][lunMonth - 1] == 6) {
        // 윤달이 있는 달이면 ( 평달과 윤달이 모두 크면 : 6)
        lunMonthDay = 30;
      }
    } else {
      // 일 증가
      lunDay++;
    }
  }
}
/**
 * 입력한 양력 날짜로 음력 날짜 반환
 */
export function getLunar(year, month, day) {
  return calcLunar(year, month, day, 1);
}

/**
 * 입력한 음력 날짜로 양력 날짜 반환
 * isLeapMonth : 입력한 음력 날짜가 윤달인가?
 */
export function getSolar(year, month, day, isLeapMonth?) {
  return calcLunar(year, month, day, 2, isLeapMonth ? 1 : 0);
}
// =====================================================================================================
//#endregion
